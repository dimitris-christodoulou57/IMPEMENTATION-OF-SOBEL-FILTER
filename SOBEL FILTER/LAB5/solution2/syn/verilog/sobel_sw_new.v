// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_sw_new,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.561667,HLS_SYN_LAT=1447691,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=3047,HLS_SYN_LUT=2753}" *)

module sobel_sw_new (
        ap_clk,
        ap_rst_n,
        m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY,
        m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY,
        m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST,
        m_axi_INPUT_r_RID,
        m_axi_INPUT_r_RUSER,
        m_axi_INPUT_r_RRESP,
        m_axi_INPUT_r_BVALID,
        m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP,
        m_axi_INPUT_r_BID,
        m_axi_INPUT_r_BUSER,
        m_axi_OUTPUT_r_AWVALID,
        m_axi_OUTPUT_r_AWREADY,
        m_axi_OUTPUT_r_AWADDR,
        m_axi_OUTPUT_r_AWID,
        m_axi_OUTPUT_r_AWLEN,
        m_axi_OUTPUT_r_AWSIZE,
        m_axi_OUTPUT_r_AWBURST,
        m_axi_OUTPUT_r_AWLOCK,
        m_axi_OUTPUT_r_AWCACHE,
        m_axi_OUTPUT_r_AWPROT,
        m_axi_OUTPUT_r_AWQOS,
        m_axi_OUTPUT_r_AWREGION,
        m_axi_OUTPUT_r_AWUSER,
        m_axi_OUTPUT_r_WVALID,
        m_axi_OUTPUT_r_WREADY,
        m_axi_OUTPUT_r_WDATA,
        m_axi_OUTPUT_r_WSTRB,
        m_axi_OUTPUT_r_WLAST,
        m_axi_OUTPUT_r_WID,
        m_axi_OUTPUT_r_WUSER,
        m_axi_OUTPUT_r_ARVALID,
        m_axi_OUTPUT_r_ARREADY,
        m_axi_OUTPUT_r_ARADDR,
        m_axi_OUTPUT_r_ARID,
        m_axi_OUTPUT_r_ARLEN,
        m_axi_OUTPUT_r_ARSIZE,
        m_axi_OUTPUT_r_ARBURST,
        m_axi_OUTPUT_r_ARLOCK,
        m_axi_OUTPUT_r_ARCACHE,
        m_axi_OUTPUT_r_ARPROT,
        m_axi_OUTPUT_r_ARQOS,
        m_axi_OUTPUT_r_ARREGION,
        m_axi_OUTPUT_r_ARUSER,
        m_axi_OUTPUT_r_RVALID,
        m_axi_OUTPUT_r_RREADY,
        m_axi_OUTPUT_r_RDATA,
        m_axi_OUTPUT_r_RLAST,
        m_axi_OUTPUT_r_RID,
        m_axi_OUTPUT_r_RUSER,
        m_axi_OUTPUT_r_RRESP,
        m_axi_OUTPUT_r_BVALID,
        m_axi_OUTPUT_r_BREADY,
        m_axi_OUTPUT_r_BRESP,
        m_axi_OUTPUT_r_BID,
        m_axi_OUTPUT_r_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_pp0_stage0 = 27'd256;
parameter    ap_ST_fsm_state12 = 27'd512;
parameter    ap_ST_fsm_state13 = 27'd1024;
parameter    ap_ST_fsm_pp1_stage0 = 27'd2048;
parameter    ap_ST_fsm_state16 = 27'd4096;
parameter    ap_ST_fsm_state17 = 27'd8192;
parameter    ap_ST_fsm_state18 = 27'd16384;
parameter    ap_ST_fsm_state19 = 27'd32768;
parameter    ap_ST_fsm_state20 = 27'd65536;
parameter    ap_ST_fsm_state21 = 27'd131072;
parameter    ap_ST_fsm_state22 = 27'd262144;
parameter    ap_ST_fsm_state23 = 27'd524288;
parameter    ap_ST_fsm_pp2_stage0 = 27'd1048576;
parameter    ap_ST_fsm_state27 = 27'd2097152;
parameter    ap_ST_fsm_pp3_stage0 = 27'd4194304;
parameter    ap_ST_fsm_pp3_stage1 = 27'd8388608;
parameter    ap_ST_fsm_pp3_stage2 = 27'd16777216;
parameter    ap_ST_fsm_pp3_stage3 = 27'd33554432;
parameter    ap_ST_fsm_state42 = 27'd67108864;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUT_r_AWVALID;
input   m_axi_INPUT_r_AWREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_AWADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_AWID;
output  [7:0] m_axi_INPUT_r_AWLEN;
output  [2:0] m_axi_INPUT_r_AWSIZE;
output  [1:0] m_axi_INPUT_r_AWBURST;
output  [1:0] m_axi_INPUT_r_AWLOCK;
output  [3:0] m_axi_INPUT_r_AWCACHE;
output  [2:0] m_axi_INPUT_r_AWPROT;
output  [3:0] m_axi_INPUT_r_AWQOS;
output  [3:0] m_axi_INPUT_r_AWREGION;
output  [C_M_AXI_INPUT_R_AWUSER_WIDTH - 1:0] m_axi_INPUT_r_AWUSER;
output   m_axi_INPUT_r_WVALID;
input   m_axi_INPUT_r_WREADY;
output  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_WDATA;
output  [C_M_AXI_INPUT_R_WSTRB_WIDTH - 1:0] m_axi_INPUT_r_WSTRB;
output   m_axi_INPUT_r_WLAST;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_WID;
output  [C_M_AXI_INPUT_R_WUSER_WIDTH - 1:0] m_axi_INPUT_r_WUSER;
output   m_axi_INPUT_r_ARVALID;
input   m_axi_INPUT_r_ARREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_ARADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_ARID;
output  [7:0] m_axi_INPUT_r_ARLEN;
output  [2:0] m_axi_INPUT_r_ARSIZE;
output  [1:0] m_axi_INPUT_r_ARBURST;
output  [1:0] m_axi_INPUT_r_ARLOCK;
output  [3:0] m_axi_INPUT_r_ARCACHE;
output  [2:0] m_axi_INPUT_r_ARPROT;
output  [3:0] m_axi_INPUT_r_ARQOS;
output  [3:0] m_axi_INPUT_r_ARREGION;
output  [C_M_AXI_INPUT_R_ARUSER_WIDTH - 1:0] m_axi_INPUT_r_ARUSER;
input   m_axi_INPUT_r_RVALID;
output   m_axi_INPUT_r_RREADY;
input  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_RDATA;
input   m_axi_INPUT_r_RLAST;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_RID;
input  [C_M_AXI_INPUT_R_RUSER_WIDTH - 1:0] m_axi_INPUT_r_RUSER;
input  [1:0] m_axi_INPUT_r_RRESP;
input   m_axi_INPUT_r_BVALID;
output   m_axi_INPUT_r_BREADY;
input  [1:0] m_axi_INPUT_r_BRESP;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_BID;
input  [C_M_AXI_INPUT_R_BUSER_WIDTH - 1:0] m_axi_INPUT_r_BUSER;
output   m_axi_OUTPUT_r_AWVALID;
input   m_axi_OUTPUT_r_AWREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_AWADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_AWID;
output  [7:0] m_axi_OUTPUT_r_AWLEN;
output  [2:0] m_axi_OUTPUT_r_AWSIZE;
output  [1:0] m_axi_OUTPUT_r_AWBURST;
output  [1:0] m_axi_OUTPUT_r_AWLOCK;
output  [3:0] m_axi_OUTPUT_r_AWCACHE;
output  [2:0] m_axi_OUTPUT_r_AWPROT;
output  [3:0] m_axi_OUTPUT_r_AWQOS;
output  [3:0] m_axi_OUTPUT_r_AWREGION;
output  [C_M_AXI_OUTPUT_R_AWUSER_WIDTH - 1:0] m_axi_OUTPUT_r_AWUSER;
output   m_axi_OUTPUT_r_WVALID;
input   m_axi_OUTPUT_r_WREADY;
output  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_WDATA;
output  [C_M_AXI_OUTPUT_R_WSTRB_WIDTH - 1:0] m_axi_OUTPUT_r_WSTRB;
output   m_axi_OUTPUT_r_WLAST;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_WID;
output  [C_M_AXI_OUTPUT_R_WUSER_WIDTH - 1:0] m_axi_OUTPUT_r_WUSER;
output   m_axi_OUTPUT_r_ARVALID;
input   m_axi_OUTPUT_r_ARREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_ARADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_ARID;
output  [7:0] m_axi_OUTPUT_r_ARLEN;
output  [2:0] m_axi_OUTPUT_r_ARSIZE;
output  [1:0] m_axi_OUTPUT_r_ARBURST;
output  [1:0] m_axi_OUTPUT_r_ARLOCK;
output  [3:0] m_axi_OUTPUT_r_ARCACHE;
output  [2:0] m_axi_OUTPUT_r_ARPROT;
output  [3:0] m_axi_OUTPUT_r_ARQOS;
output  [3:0] m_axi_OUTPUT_r_ARREGION;
output  [C_M_AXI_OUTPUT_R_ARUSER_WIDTH - 1:0] m_axi_OUTPUT_r_ARUSER;
input   m_axi_OUTPUT_r_RVALID;
output   m_axi_OUTPUT_r_RREADY;
input  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_RDATA;
input   m_axi_OUTPUT_r_RLAST;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_RID;
input  [C_M_AXI_OUTPUT_R_RUSER_WIDTH - 1:0] m_axi_OUTPUT_r_RUSER;
input  [1:0] m_axi_OUTPUT_r_RRESP;
input   m_axi_OUTPUT_r_BVALID;
output   m_axi_OUTPUT_r_BREADY;
input  [1:0] m_axi_OUTPUT_r_BRESP;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_BID;
input  [C_M_AXI_OUTPUT_R_BUSER_WIDTH - 1:0] m_axi_OUTPUT_r_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r_r;
wire   [31:0] output_r_r;
reg    INPUT_r_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    INPUT_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond6_reg_912;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0_flag00000000;
reg   [0:0] exitcond3_reg_956;
reg    OUTPUT_r_blk_n_AW;
wire    ap_CS_fsm_pp3_stage3;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage3_flag00000000;
reg   [0:0] icmp_reg_1087;
reg    OUTPUT_r_blk_n_W;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0_flag00000000;
reg    OUTPUT_r_blk_n_B;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter3;
wire    ap_block_pp3_stage1_flag00000000;
reg   [0:0] ap_reg_pp3_iter2_icmp_reg_1087;
wire    INPUT_r_AWREADY;
wire    INPUT_r_WREADY;
reg    INPUT_r_ARVALID;
wire    INPUT_r_ARREADY;
reg   [31:0] INPUT_r_ARADDR;
reg   [31:0] INPUT_r_ARLEN;
wire    INPUT_r_RVALID;
reg    INPUT_r_RREADY;
wire   [7:0] INPUT_r_RDATA;
wire    INPUT_r_RLAST;
wire   [0:0] INPUT_r_RID;
wire   [0:0] INPUT_r_RUSER;
wire   [1:0] INPUT_r_RRESP;
wire    INPUT_r_BVALID;
wire   [1:0] INPUT_r_BRESP;
wire   [0:0] INPUT_r_BID;
wire   [0:0] INPUT_r_BUSER;
reg    OUTPUT_r_AWVALID;
wire    OUTPUT_r_AWREADY;
reg   [31:0] OUTPUT_r_AWADDR;
reg    OUTPUT_r_WVALID;
wire    OUTPUT_r_WREADY;
reg   [7:0] OUTPUT_r_WDATA;
wire    OUTPUT_r_ARREADY;
wire    OUTPUT_r_RVALID;
wire   [7:0] OUTPUT_r_RDATA;
wire    OUTPUT_r_RLAST;
wire   [0:0] OUTPUT_r_RID;
wire   [0:0] OUTPUT_r_RUSER;
wire   [1:0] OUTPUT_r_RRESP;
wire    OUTPUT_r_BVALID;
reg    OUTPUT_r_BREADY;
wire   [1:0] OUTPUT_r_BRESP;
wire   [0:0] OUTPUT_r_BID;
wire   [0:0] OUTPUT_r_BUSER;
reg   [11:0] indvar_reg_299;
reg   [11:0] ap_reg_pp0_iter1_indvar_reg_299;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_flag00011001;
reg   [11:0] k_reg_323;
reg   [10:0] indvar1_reg_335;
reg   [9:0] posx_assign_reg_346;
reg   [9:0] ap_reg_pp3_iter1_posx_assign_reg_346;
wire    ap_block_state28_pp3_stage0_iter0;
wire    ap_block_state32_pp3_stage0_iter1;
wire    ap_block_state36_pp3_stage0_iter2;
reg    ap_sig_ioackin_OUTPUT_r_WREADY;
reg    ap_block_state36_io;
wire    ap_block_state40_pp3_stage0_iter3;
reg    ap_block_pp3_stage0_flag00011001;
reg   [7:0] reg_361;
wire    ap_block_state24_pp2_stage0_iter0;
reg    ap_block_state25_pp2_stage0_iter1;
wire    ap_block_state26_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_flag00011001;
wire   [7:0] small_input_q0;
reg   [7:0] reg_367;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state29_pp3_stage1_iter0;
wire    ap_block_state33_pp3_stage1_iter1;
wire    ap_block_state37_pp3_stage1_iter2;
reg    ap_block_state41_pp3_stage1_iter3;
reg    ap_block_pp3_stage1_flag00011001;
reg   [0:0] exitcond_reg_970;
wire   [7:0] small_input_q1;
reg   [31:0] output_read_reg_884;
reg   [31:0] input_read_reg_889;
reg    ap_sig_ioackin_INPUT_r_ARREADY;
wire  signed [32:0] tmp_20_cast_fu_382_p1;
reg  signed [32:0] tmp_20_cast_reg_901;
wire    ap_CS_fsm_state8;
wire  signed [32:0] tmp_21_cast_fu_385_p1;
reg  signed [32:0] tmp_21_cast_reg_907;
wire   [0:0] exitcond6_fu_388_p2;
reg   [0:0] ap_reg_pp0_iter1_exitcond6_reg_912;
wire   [11:0] indvar_next_fu_394_p2;
reg   [11:0] indvar_next_reg_916;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond2_fu_410_p2;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_1_fu_416_p2;
reg   [0:0] tmp_1_reg_932;
wire   [0:0] exitcond1_fu_422_p2;
reg   [0:0] exitcond1_reg_936;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state14_pp1_stage0_iter0;
wire    ap_block_state15_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_flag00011001;
wire   [11:0] k_1_fu_428_p2;
reg   [11:0] k_1_reg_940;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] INPUT_addr_1_reg_950;
wire    ap_CS_fsm_state16;
wire   [0:0] exitcond3_fu_475_p2;
reg   [0:0] ap_reg_pp2_iter1_exitcond3_reg_956;
wire   [10:0] indvar_next1_fu_481_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [11:0] tmp_9_fu_487_p3;
reg   [11:0] tmp_9_reg_965;
reg   [11:0] ap_reg_pp2_iter1_tmp_9_reg_965;
wire   [0:0] exitcond_fu_510_p2;
reg   [0:0] ap_reg_pp3_iter1_exitcond_reg_970;
wire   [11:0] posx_assign_cast8_fu_516_p1;
reg   [11:0] posx_assign_cast8_reg_974;
wire   [9:0] j_fu_520_p2;
reg   [9:0] j_reg_979;
wire   [10:0] posx_assign_cast_fu_542_p1;
reg   [10:0] posx_assign_cast_reg_994;
reg   [7:0] small_input_load_3_reg_1004;
wire    ap_CS_fsm_pp3_stage2;
wire    ap_block_state30_pp3_stage2_iter0;
wire    ap_block_state34_pp3_stage2_iter1;
wire    ap_block_state38_pp3_stage2_iter2;
wire    ap_block_pp3_stage2_flag00011001;
wire   [10:0] res_8_i_fu_635_p2;
reg   [10:0] res_8_i_reg_1025;
wire   [8:0] tmp2_fu_641_p2;
reg   [8:0] tmp2_reg_1030;
wire   [10:0] tmp_50_i_cast_fu_659_p1;
reg   [10:0] tmp_50_i_cast_reg_1035;
wire    ap_block_state31_pp3_stage3_iter0;
wire    ap_block_state35_pp3_stage3_iter1;
reg    ap_sig_ioackin_OUTPUT_r_AWREADY;
reg    ap_block_state35_io;
wire    ap_block_state39_pp3_stage3_iter2;
reg    ap_block_pp3_stage3_flag00011001;
wire   [10:0] res_fu_668_p2;
reg   [10:0] res_reg_1040;
wire   [10:0] res_3_i_fu_717_p2;
reg   [10:0] res_3_i_reg_1057;
wire   [10:0] abs_fu_735_p3;
reg   [10:0] abs_reg_1062;
wire   [10:0] res_1_fu_759_p2;
reg   [10:0] res_1_reg_1067;
wire   [10:0] neg3_fu_765_p2;
reg   [10:0] neg3_reg_1072;
wire   [0:0] abscond4_fu_771_p2;
reg   [0:0] abscond4_reg_1077;
wire   [7:0] tmp_11_fu_777_p1;
reg   [7:0] tmp_11_reg_1082;
wire   [0:0] icmp_fu_813_p2;
reg   [31:0] OUTPUT_addr_reg_1091;
wire   [7:0] tmp_15_fu_846_p2;
reg   [7:0] tmp_15_reg_1096;
reg   [31:0] OUTPUT_addr_1_reg_1101;
wire   [8:0] i_1_fu_878_p2;
wire    ap_CS_fsm_state42;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_flag00011011;
reg    ap_condition_pp1_exit_iter0_state14;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state23;
reg    ap_block_pp2_stage0_flag00011011;
reg    ap_condition_pp2_exit_iter0_state24;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state27;
reg    ap_block_pp3_stage0_flag00011011;
reg    ap_condition_pp3_exit_iter0_state28;
reg    ap_block_pp3_stage3_flag00011011;
reg    ap_block_pp3_stage1_flag00011011;
reg   [11:0] small_input_address0;
reg    small_input_ce0;
reg    small_input_we0;
reg   [11:0] small_input_address1;
reg    small_input_ce1;
reg    small_input_we1;
reg   [7:0] small_input_d1;
reg   [11:0] indvar_phi_fu_303_p4;
reg   [8:0] i_reg_311;
wire    ap_CS_fsm_state12;
reg   [11:0] k_phi_fu_327_p4;
wire    ap_block_pp1_stage0_flag00000000;
reg   [9:0] posx_assign_phi_fu_350_p4;
wire   [63:0] tmp_fu_400_p1;
wire   [63:0] tmp_5_fu_440_p1;
wire   [63:0] tmp_6_fu_445_p1;
wire   [63:0] tmp_7_fu_495_p1;
wire   [63:0] tmp_i_fu_526_p1;
wire   [63:0] tmp_39_i_fu_537_p1;
wire   [63:0] tmp_35_i_fu_552_p1;
wire   [63:0] tmp_42_i_fu_563_p1;
wire   [63:0] tmp_45_i_fu_600_p1;
wire    ap_block_pp3_stage2_flag00000000;
wire   [63:0] tmp_49_i_fu_610_p1;
wire   [63:0] tmp_18_i_fu_674_p1;
wire   [63:0] tmp_28_i_fu_687_p1;
wire  signed [63:0] tmp_2_fu_372_p1;
wire  signed [63:0] input2_sum5_cast_fu_465_p1;
wire  signed [63:0] output4_sum7_cast_fu_836_p1;
wire  signed [63:0] output4_sum_cast_fu_868_p1;
reg    ap_reg_ioackin_INPUT_r_ARREADY;
reg    ap_reg_ioackin_OUTPUT_r_AWREADY;
wire    ap_block_pp3_stage3_flag00001001;
reg    ap_reg_ioackin_OUTPUT_r_WREADY;
wire    ap_block_pp3_stage0_flag00001001;
reg   [31:0] position_fu_166;
wire   [31:0] position_1_fu_499_p2;
wire   [11:0] tmp_4_fu_434_p2;
wire   [31:0] tmp_3_fu_450_p2;
wire  signed [32:0] tmp_3_cast_fu_456_p1;
wire   [32:0] input2_sum5_fu_460_p2;
wire   [11:0] tmp_38_i_fu_531_p2;
wire   [10:0] tmp_34_i_fu_546_p2;
wire   [9:0] tmp_41_i_fu_557_p2;
wire   [8:0] tmp_37_i_fu_572_p3;
wire   [10:0] tmp_44_i_fu_595_p2;
wire   [11:0] tmp_48_i_fu_605_p2;
wire   [8:0] res_cast_fu_568_p1;
wire   [8:0] tmp_40_i_cast6_fu_584_p1;
wire   [8:0] tmp1_fu_615_p2;
wire   [9:0] tmp1_cast_fu_621_p1;
wire   [9:0] tmp_37_i_cast_fu_580_p1;
wire   [9:0] res_7_i_fu_625_p2;
wire   [10:0] res_7_i_cast_fu_631_p1;
wire   [10:0] res_2_cast_fu_591_p1;
wire   [8:0] res_2_cast5_fu_587_p1;
wire   [8:0] tmp_47_i_fu_647_p3;
wire   [10:0] tmp_47_i_cast_fu_655_p1;
wire   [10:0] res_9_i_fu_663_p2;
wire   [11:0] tmp_27_i_fu_679_p3;
wire   [8:0] tmp_20_i_fu_692_p3;
wire   [9:0] tmp2_cast_fu_704_p1;
wire   [9:0] tmp_20_i_cast_fu_700_p1;
wire   [9:0] res_2_i_fu_707_p2;
wire   [10:0] res_2_i_cast_fu_713_p1;
wire   [0:0] abscond_fu_730_p2;
wire   [10:0] neg_fu_725_p2;
wire   [8:0] tmp_30_i_fu_742_p3;
wire   [10:0] tmp_30_i_cast_fu_750_p1;
wire   [10:0] res_4_i_fu_754_p2;
wire   [10:0] tmp_40_i_cast_fu_722_p1;
wire   [10:0] abs5_fu_784_p3;
wire  signed [11:0] abs_cast4_fu_781_p1;
wire  signed [11:0] abs5_cast3_fu_789_p1;
wire   [11:0] p_fu_797_p2;
wire   [3:0] tmp_14_fu_803_p4;
wire   [18:0] tmp_13_fu_819_p3;
wire   [32:0] tmp_14_cast_fu_827_p1;
wire   [32:0] output4_sum7_fu_831_p2;
wire   [7:0] tmp_12_fu_793_p1;
wire   [18:0] tmp_16_fu_851_p3;
wire   [32:0] tmp_17_cast_fu_859_p1;
wire   [32:0] output4_sum_fu_863_p2;
reg   [26:0] ap_NS_fsm;
wire    ap_block_pp3_stage2_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_condition_1437;
reg    ap_condition_1440;
reg    ap_condition_502;
reg    ap_condition_508;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_reg_ioackin_INPUT_r_ARREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_r_WREADY = 1'b0;
end

sobel_sw_new_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
sobel_sw_new_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_r_r(input_r_r),
    .output_r_r(output_r_r)
);

sobel_sw_new_INPUT_r_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_R_CACHE_VALUE ))
sobel_sw_new_INPUT_r_m_axi_U(
    .AWVALID(m_axi_INPUT_r_AWVALID),
    .AWREADY(m_axi_INPUT_r_AWREADY),
    .AWADDR(m_axi_INPUT_r_AWADDR),
    .AWID(m_axi_INPUT_r_AWID),
    .AWLEN(m_axi_INPUT_r_AWLEN),
    .AWSIZE(m_axi_INPUT_r_AWSIZE),
    .AWBURST(m_axi_INPUT_r_AWBURST),
    .AWLOCK(m_axi_INPUT_r_AWLOCK),
    .AWCACHE(m_axi_INPUT_r_AWCACHE),
    .AWPROT(m_axi_INPUT_r_AWPROT),
    .AWQOS(m_axi_INPUT_r_AWQOS),
    .AWREGION(m_axi_INPUT_r_AWREGION),
    .AWUSER(m_axi_INPUT_r_AWUSER),
    .WVALID(m_axi_INPUT_r_WVALID),
    .WREADY(m_axi_INPUT_r_WREADY),
    .WDATA(m_axi_INPUT_r_WDATA),
    .WSTRB(m_axi_INPUT_r_WSTRB),
    .WLAST(m_axi_INPUT_r_WLAST),
    .WID(m_axi_INPUT_r_WID),
    .WUSER(m_axi_INPUT_r_WUSER),
    .ARVALID(m_axi_INPUT_r_ARVALID),
    .ARREADY(m_axi_INPUT_r_ARREADY),
    .ARADDR(m_axi_INPUT_r_ARADDR),
    .ARID(m_axi_INPUT_r_ARID),
    .ARLEN(m_axi_INPUT_r_ARLEN),
    .ARSIZE(m_axi_INPUT_r_ARSIZE),
    .ARBURST(m_axi_INPUT_r_ARBURST),
    .ARLOCK(m_axi_INPUT_r_ARLOCK),
    .ARCACHE(m_axi_INPUT_r_ARCACHE),
    .ARPROT(m_axi_INPUT_r_ARPROT),
    .ARQOS(m_axi_INPUT_r_ARQOS),
    .ARREGION(m_axi_INPUT_r_ARREGION),
    .ARUSER(m_axi_INPUT_r_ARUSER),
    .RVALID(m_axi_INPUT_r_RVALID),
    .RREADY(m_axi_INPUT_r_RREADY),
    .RDATA(m_axi_INPUT_r_RDATA),
    .RLAST(m_axi_INPUT_r_RLAST),
    .RID(m_axi_INPUT_r_RID),
    .RUSER(m_axi_INPUT_r_RUSER),
    .RRESP(m_axi_INPUT_r_RRESP),
    .BVALID(m_axi_INPUT_r_BVALID),
    .BREADY(m_axi_INPUT_r_BREADY),
    .BRESP(m_axi_INPUT_r_BRESP),
    .BID(m_axi_INPUT_r_BID),
    .BUSER(m_axi_INPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_r_ARVALID),
    .I_ARREADY(INPUT_r_ARREADY),
    .I_ARADDR(INPUT_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(INPUT_r_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(INPUT_r_RVALID),
    .I_RREADY(INPUT_r_RREADY),
    .I_RDATA(INPUT_r_RDATA),
    .I_RID(INPUT_r_RID),
    .I_RUSER(INPUT_r_RUSER),
    .I_RRESP(INPUT_r_RRESP),
    .I_RLAST(INPUT_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_r_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(INPUT_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_r_BRESP),
    .I_BID(INPUT_r_BID),
    .I_BUSER(INPUT_r_BUSER)
);

sobel_sw_new_OUTPUT_r_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_R_CACHE_VALUE ))
sobel_sw_new_OUTPUT_r_m_axi_U(
    .AWVALID(m_axi_OUTPUT_r_AWVALID),
    .AWREADY(m_axi_OUTPUT_r_AWREADY),
    .AWADDR(m_axi_OUTPUT_r_AWADDR),
    .AWID(m_axi_OUTPUT_r_AWID),
    .AWLEN(m_axi_OUTPUT_r_AWLEN),
    .AWSIZE(m_axi_OUTPUT_r_AWSIZE),
    .AWBURST(m_axi_OUTPUT_r_AWBURST),
    .AWLOCK(m_axi_OUTPUT_r_AWLOCK),
    .AWCACHE(m_axi_OUTPUT_r_AWCACHE),
    .AWPROT(m_axi_OUTPUT_r_AWPROT),
    .AWQOS(m_axi_OUTPUT_r_AWQOS),
    .AWREGION(m_axi_OUTPUT_r_AWREGION),
    .AWUSER(m_axi_OUTPUT_r_AWUSER),
    .WVALID(m_axi_OUTPUT_r_WVALID),
    .WREADY(m_axi_OUTPUT_r_WREADY),
    .WDATA(m_axi_OUTPUT_r_WDATA),
    .WSTRB(m_axi_OUTPUT_r_WSTRB),
    .WLAST(m_axi_OUTPUT_r_WLAST),
    .WID(m_axi_OUTPUT_r_WID),
    .WUSER(m_axi_OUTPUT_r_WUSER),
    .ARVALID(m_axi_OUTPUT_r_ARVALID),
    .ARREADY(m_axi_OUTPUT_r_ARREADY),
    .ARADDR(m_axi_OUTPUT_r_ARADDR),
    .ARID(m_axi_OUTPUT_r_ARID),
    .ARLEN(m_axi_OUTPUT_r_ARLEN),
    .ARSIZE(m_axi_OUTPUT_r_ARSIZE),
    .ARBURST(m_axi_OUTPUT_r_ARBURST),
    .ARLOCK(m_axi_OUTPUT_r_ARLOCK),
    .ARCACHE(m_axi_OUTPUT_r_ARCACHE),
    .ARPROT(m_axi_OUTPUT_r_ARPROT),
    .ARQOS(m_axi_OUTPUT_r_ARQOS),
    .ARREGION(m_axi_OUTPUT_r_ARREGION),
    .ARUSER(m_axi_OUTPUT_r_ARUSER),
    .RVALID(m_axi_OUTPUT_r_RVALID),
    .RREADY(m_axi_OUTPUT_r_RREADY),
    .RDATA(m_axi_OUTPUT_r_RDATA),
    .RLAST(m_axi_OUTPUT_r_RLAST),
    .RID(m_axi_OUTPUT_r_RID),
    .RUSER(m_axi_OUTPUT_r_RUSER),
    .RRESP(m_axi_OUTPUT_r_RRESP),
    .BVALID(m_axi_OUTPUT_r_BVALID),
    .BREADY(m_axi_OUTPUT_r_BREADY),
    .BRESP(m_axi_OUTPUT_r_BRESP),
    .BID(m_axi_OUTPUT_r_BID),
    .BUSER(m_axi_OUTPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUTPUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUT_r_RDATA),
    .I_RID(OUTPUT_r_RID),
    .I_RUSER(OUTPUT_r_RUSER),
    .I_RRESP(OUTPUT_r_RRESP),
    .I_RLAST(OUTPUT_r_RLAST),
    .I_AWVALID(OUTPUT_r_AWVALID),
    .I_AWREADY(OUTPUT_r_AWREADY),
    .I_AWADDR(OUTPUT_r_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUTPUT_r_WVALID),
    .I_WREADY(OUTPUT_r_WREADY),
    .I_WDATA(OUTPUT_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(OUTPUT_r_BVALID),
    .I_BREADY(OUTPUT_r_BREADY),
    .I_BRESP(OUTPUT_r_BRESP),
    .I_BID(OUTPUT_r_BID),
    .I_BUSER(OUTPUT_r_BUSER)
);

sobel_sw_new_smalbkb #(
    .DataWidth( 8 ),
    .AddressRange( 3072 ),
    .AddressWidth( 12 ))
small_input_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(small_input_address0),
    .ce0(small_input_ce0),
    .we0(small_input_we0),
    .d0(reg_361),
    .q0(small_input_q0),
    .address1(small_input_address1),
    .ce1(small_input_ce1),
    .we1(small_input_we1),
    .d1(small_input_d1),
    .q1(small_input_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state9 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state14))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == exitcond2_fu_410_p2) & (1'd0 == tmp_1_fu_416_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state14))) begin
            ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state14 ^ 1'b1);
        end else if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == exitcond2_fu_410_p2) & (1'd0 == tmp_1_fu_416_p2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp2_exit_iter0_state24))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state24)) begin
                ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state24 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter0_state28))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage3) & (ap_block_pp3_stage3_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state28)) begin
                ap_enable_reg_pp3_iter1 <= (ap_condition_pp3_exit_iter0_state28 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage3) & (ap_block_pp3_stage3_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp3_stage3) & (ap_block_pp3_stage3_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage1) & (ap_block_pp3_stage1_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp3_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_INPUT_r_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_INPUT_r_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (ap_sig_ioackin_INPUT_r_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_INPUT_r_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == INPUT_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state17) & (1'b1 == INPUT_r_ARREADY)))) begin
            ap_reg_ioackin_INPUT_r_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_r_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'd0 == icmp_reg_1087) & (ap_block_pp3_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter1) & (icmp_reg_1087 == 1'd1) & (ap_block_pp3_stage3_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_OUTPUT_r_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'd0 == icmp_reg_1087) & (1'b1 == OUTPUT_r_AWREADY) & (ap_block_pp3_stage3_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter1) & (icmp_reg_1087 == 1'd1) & (1'b1 == OUTPUT_r_AWREADY) & (ap_block_pp3_stage3_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_OUTPUT_r_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_r_WREADY <= 1'b0;
    end else begin
        if ((((1'd0 == icmp_reg_1087) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter2) & (ap_block_pp3_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter2) & (icmp_reg_1087 == 1'd1) & (ap_block_pp3_stage0_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_OUTPUT_r_WREADY <= 1'b0;
        end else if ((((1'd0 == icmp_reg_1087) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter2) & (1'b1 == OUTPUT_r_WREADY) & (ap_block_pp3_stage0_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter2) & (icmp_reg_1087 == 1'd1) & (1'b1 == OUTPUT_r_WREADY) & (ap_block_pp3_stage0_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_OUTPUT_r_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_311 <= 9'd1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        i_reg_311 <= i_1_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd0 == exitcond3_fu_475_p2))) begin
        indvar1_reg_335 <= indvar_next1_fu_481_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar1_reg_335 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_912 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_reg_299 <= indvar_next_reg_916;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_299 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == exitcond2_fu_410_p2) & (1'd0 == tmp_1_fu_416_p2))) begin
        k_reg_323 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_936))) begin
        k_reg_323 <= k_1_reg_940;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'd0 == tmp_1_reg_932))) begin
        position_fu_166 <= position_1_fu_499_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        position_fu_166 <= 32'd3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp3_iter1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_970))) begin
        posx_assign_reg_346 <= j_reg_979;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        posx_assign_reg_346 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd0 == exitcond_reg_970)) begin
        if ((ap_condition_508 == 1'b1)) begin
            reg_367 <= small_input_q1;
        end else if ((ap_condition_502 == 1'b1)) begin
            reg_367 <= small_input_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        INPUT_addr_1_reg_950 <= input2_sum5_cast_fu_465_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage2) & (ap_block_pp3_stage2_flag00011001 == 1'b0) & (1'd1 == icmp_fu_813_p2))) begin
        OUTPUT_addr_1_reg_1101 <= output4_sum_cast_fu_868_p1;
        tmp_15_reg_1096 <= tmp_15_fu_846_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage2) & (ap_block_pp3_stage2_flag00011001 == 1'b0) & (1'd0 == icmp_fu_813_p2))) begin
        OUTPUT_addr_reg_1091 <= output4_sum7_cast_fu_836_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage1) & (ap_block_pp3_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp3_iter1_exitcond_reg_970))) begin
        abs_reg_1062 <= abs_fu_735_p3;
        abscond4_reg_1077 <= abscond4_fu_771_p2;
        neg3_reg_1072 <= neg3_fu_765_p2;
        res_1_reg_1067 <= res_1_fu_759_p2;
        tmp_11_reg_1082 <= tmp_11_fu_777_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond6_reg_912 <= exitcond6_reg_912;
        ap_reg_pp0_iter1_indvar_reg_299 <= indvar_reg_299;
        exitcond6_reg_912 <= exitcond6_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp2_iter1_exitcond3_reg_956 <= exitcond3_reg_956;
        ap_reg_pp2_iter1_tmp_9_reg_965[10 : 0] <= tmp_9_reg_965[10 : 0];
        exitcond3_reg_956 <= exitcond3_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp3_iter1_exitcond_reg_970 <= exitcond_reg_970;
        ap_reg_pp3_iter1_posx_assign_reg_346 <= posx_assign_reg_346;
        exitcond_reg_970 <= exitcond_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage2) & (ap_block_pp3_stage2_flag00011001 == 1'b0))) begin
        ap_reg_pp3_iter2_icmp_reg_1087 <= icmp_reg_1087;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        exitcond1_reg_936 <= exitcond1_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage2) & (ap_block_pp3_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp3_iter1_exitcond_reg_970))) begin
        icmp_reg_1087 <= icmp_fu_813_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_next_reg_916 <= indvar_next_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_read_reg_889 <= input_r_r;
        output_read_reg_884 <= output_r_r;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'd0 == exitcond_fu_510_p2))) begin
        j_reg_979 <= j_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        k_1_reg_940 <= k_1_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_fu_510_p2))) begin
        posx_assign_cast8_reg_974[9 : 0] <= posx_assign_cast8_fu_516_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage1) & (ap_block_pp3_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_970))) begin
        posx_assign_cast_reg_994[9 : 0] <= posx_assign_cast_fu_542_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_912 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd0 == exitcond3_reg_956) & (ap_block_pp2_stage0_flag00011001 == 1'b0)))) begin
        reg_361 <= INPUT_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_970))) begin
        res_3_i_reg_1057 <= res_3_i_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_reg_970) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_block_pp3_stage2_flag00011001 == 1'b0))) begin
        res_8_i_reg_1025 <= res_8_i_fu_635_p2;
        tmp2_reg_1030 <= tmp2_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage3) & (1'd0 == exitcond_reg_970) & (ap_block_pp3_stage3_flag00011001 == 1'b0))) begin
        res_reg_1040 <= res_fu_668_p2;
        tmp_50_i_cast_reg_1035[7 : 0] <= tmp_50_i_cast_fu_659_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_970))) begin
        small_input_load_3_reg_1004 <= small_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == exitcond2_fu_410_p2))) begin
        tmp_1_reg_932 <= tmp_1_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_20_cast_reg_901 <= tmp_20_cast_fu_382_p1;
        tmp_21_cast_reg_907 <= tmp_21_cast_fu_385_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond3_fu_475_p2))) begin
        tmp_9_reg_965[10 : 0] <= tmp_9_fu_487_p3[10 : 0];
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_INPUT_r_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            INPUT_r_ARADDR = INPUT_addr_1_reg_950;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            INPUT_r_ARADDR = tmp_2_fu_372_p1;
        end else begin
            INPUT_r_ARADDR = 'bx;
        end
    end else begin
        INPUT_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_INPUT_r_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            INPUT_r_ARLEN = 32'd1024;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            INPUT_r_ARLEN = 32'd3072;
        end else begin
            INPUT_r_ARLEN = 'bx;
        end
    end else begin
        INPUT_r_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_INPUT_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state17) & (1'b0 == ap_reg_ioackin_INPUT_r_ARREADY)))) begin
        INPUT_r_ARVALID = 1'b1;
    end else begin
        INPUT_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_912 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd0 == exitcond3_reg_956) & (ap_block_pp2_stage0_flag00011001 == 1'b0)))) begin
        INPUT_r_RREADY = 1'b1;
    end else begin
        INPUT_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17))) begin
        INPUT_r_blk_n_AR = m_axi_INPUT_r_ARREADY;
    end else begin
        INPUT_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond6_reg_912 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0) & (1'd0 == exitcond3_reg_956)))) begin
        INPUT_r_blk_n_R = m_axi_INPUT_r_RVALID;
    end else begin
        INPUT_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((ap_condition_1437 == 1'b1)) begin
        if ((icmp_reg_1087 == 1'd1)) begin
            OUTPUT_r_AWADDR = OUTPUT_addr_1_reg_1101;
        end else if ((1'd0 == icmp_reg_1087)) begin
            OUTPUT_r_AWADDR = OUTPUT_addr_reg_1091;
        end else begin
            OUTPUT_r_AWADDR = 'bx;
        end
    end else begin
        OUTPUT_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'd0 == icmp_reg_1087) & (ap_block_pp3_stage3_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_OUTPUT_r_AWREADY)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter1) & (icmp_reg_1087 == 1'd1) & (ap_block_pp3_stage3_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_OUTPUT_r_AWREADY)))) begin
        OUTPUT_r_AWVALID = 1'b1;
    end else begin
        OUTPUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter3) & (1'd0 == ap_reg_pp3_iter2_icmp_reg_1087) & (ap_block_pp3_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter3) & (ap_reg_pp3_iter2_icmp_reg_1087 == 1'd1) & (ap_block_pp3_stage1_flag00011001 == 1'b0)))) begin
        OUTPUT_r_BREADY = 1'b1;
    end else begin
        OUTPUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_condition_1440 == 1'b1)) begin
        if ((icmp_reg_1087 == 1'd1)) begin
            OUTPUT_r_WDATA = tmp_15_reg_1096;
        end else if ((1'd0 == icmp_reg_1087)) begin
            OUTPUT_r_WDATA = 8'd255;
        end else begin
            OUTPUT_r_WDATA = 'bx;
        end
    end else begin
        OUTPUT_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == icmp_reg_1087) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter2) & (ap_block_pp3_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_OUTPUT_r_WREADY)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter2) & (icmp_reg_1087 == 1'd1) & (ap_block_pp3_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_OUTPUT_r_WREADY)))) begin
        OUTPUT_r_WVALID = 1'b1;
    end else begin
        OUTPUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter1) & (ap_block_pp3_stage3_flag00000000 == 1'b0) & (1'd0 == icmp_reg_1087)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter1) & (ap_block_pp3_stage3_flag00000000 == 1'b0) & (icmp_reg_1087 == 1'd1)))) begin
        OUTPUT_r_blk_n_AW = m_axi_OUTPUT_r_AWREADY;
    end else begin
        OUTPUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter3) & (ap_block_pp3_stage1_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp3_iter2_icmp_reg_1087)) | ((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter3) & (ap_block_pp3_stage1_flag00000000 == 1'b0) & (ap_reg_pp3_iter2_icmp_reg_1087 == 1'd1)))) begin
        OUTPUT_r_blk_n_B = m_axi_OUTPUT_r_BVALID;
    end else begin
        OUTPUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'd0 == icmp_reg_1087) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter2) & (ap_block_pp3_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter2) & (ap_block_pp3_stage0_flag00000000 == 1'b0) & (icmp_reg_1087 == 1'd1)))) begin
        OUTPUT_r_blk_n_W = m_axi_OUTPUT_r_WREADY;
    end else begin
        OUTPUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond6_fu_388_p2)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond1_fu_422_p2)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond3_fu_475_p2)) begin
        ap_condition_pp2_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_fu_510_p2)) begin
        ap_condition_pp3_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == exitcond2_fu_410_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp2_iter0) & (1'b0 == ap_enable_reg_pp2_iter1) & (1'b0 == ap_enable_reg_pp2_iter2))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp3_iter0) & (1'b0 == ap_enable_reg_pp3_iter1) & (1'b0 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_enable_reg_pp3_iter3))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == exitcond2_fu_410_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_INPUT_r_ARREADY)) begin
        ap_sig_ioackin_INPUT_r_ARREADY = INPUT_r_ARREADY;
    end else begin
        ap_sig_ioackin_INPUT_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_r_AWREADY)) begin
        ap_sig_ioackin_OUTPUT_r_AWREADY = OUTPUT_r_AWREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_OUTPUT_r_WREADY)) begin
        ap_sig_ioackin_OUTPUT_r_WREADY = OUTPUT_r_WREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond6_reg_912 == 1'd0))) begin
        indvar_phi_fu_303_p4 = indvar_next_reg_916;
    end else begin
        indvar_phi_fu_303_p4 = indvar_reg_299;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_936) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        k_phi_fu_327_p4 = k_1_reg_940;
    end else begin
        k_phi_fu_327_p4 = k_reg_323;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp3_iter1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00000000 == 1'b0) & (1'd0 == exitcond_reg_970))) begin
        posx_assign_phi_fu_350_p4 = j_reg_979;
    end else begin
        posx_assign_phi_fu_350_p4 = posx_assign_reg_346;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage3) & (ap_block_pp3_stage3_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        small_input_address0 = tmp_18_i_fu_674_p1;
    end else if (((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_block_pp3_stage2_flag00000000 == 1'b0))) begin
        small_input_address0 = tmp_45_i_fu_600_p1;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage1) & (ap_block_pp3_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        small_input_address0 = tmp_35_i_fu_552_p1;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        small_input_address0 = tmp_i_fu_526_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        small_input_address0 = tmp_5_fu_440_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        small_input_address0 = tmp_fu_400_p1;
    end else begin
        small_input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage3) & (ap_block_pp3_stage3_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        small_input_address1 = tmp_28_i_fu_687_p1;
    end else if (((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_block_pp3_stage2_flag00000000 == 1'b0))) begin
        small_input_address1 = tmp_49_i_fu_610_p1;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage1) & (ap_block_pp3_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        small_input_address1 = tmp_42_i_fu_563_p1;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        small_input_address1 = tmp_39_i_fu_537_p1;
    end else if (((ap_block_pp2_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter2))) begin
        small_input_address1 = tmp_7_fu_495_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        small_input_address1 = tmp_6_fu_445_p1;
    end else begin
        small_input_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_block_pp3_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage3_flag00011001 == 1'b0)))) begin
        small_input_ce0 = 1'b1;
    end else begin
        small_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter2)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_block_pp3_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage3_flag00011001 == 1'b0)))) begin
        small_input_ce1 = 1'b1;
    end else begin
        small_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp2_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter2))) begin
        small_input_d1 = reg_361;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        small_input_d1 = small_input_q0;
    end else begin
        small_input_d1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond6_reg_912))) begin
        small_input_we0 = 1'b1;
    end else begin
        small_input_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_936)) | ((ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter2) & (1'd0 == ap_reg_pp2_iter1_exitcond3_reg_956)))) begin
        small_input_we1 = 1'b1;
    end else begin
        small_input_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_INPUT_r_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond6_fu_388_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond6_fu_388_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == exitcond2_fu_410_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == exitcond2_fu_410_p2) & (1'd0 == tmp_1_fu_416_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond1_fu_422_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond1_fu_422_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (ap_sig_ioackin_INPUT_r_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter2) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond3_fu_475_p2) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter2) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond3_fu_475_p2) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (((ap_block_pp3_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_fu_510_p2) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_fu_510_p2) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if (((ap_block_pp3_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter3) & (ap_block_pp3_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else if (((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter3) & (ap_block_pp3_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((ap_block_pp3_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((ap_block_pp3_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs5_cast3_fu_789_p1 = $signed(abs5_fu_784_p3);

assign abs5_fu_784_p3 = ((abscond4_reg_1077[0:0] === 1'b1) ? res_1_reg_1067 : neg3_reg_1072);

assign abs_cast4_fu_781_p1 = $signed(abs_reg_1062);

assign abs_fu_735_p3 = ((abscond_fu_730_p2[0:0] === 1'b1) ? res_reg_1040 : neg_fu_725_p2);

assign abscond4_fu_771_p2 = (($signed(res_1_fu_759_p2) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_730_p2 = (($signed(res_reg_1040) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp3_stage3 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_912 == 1'd0) & (1'b0 == INPUT_r_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_912 == 1'd0) & (1'b0 == INPUT_r_RVALID));
end

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp2_iter1) & (1'd0 == exitcond3_reg_956) & (1'b0 == INPUT_r_RVALID));
end

always @ (*) begin
    ap_block_pp2_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp2_iter1) & (1'd0 == exitcond3_reg_956) & (1'b0 == INPUT_r_RVALID));
end

assign ap_block_pp3_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b1 == ap_block_state36_io));
end

always @ (*) begin
    ap_block_pp3_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b1 == ap_block_state36_io));
end

assign ap_block_pp3_stage1_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage1_flag00011001 = ((1'b1 == ap_enable_reg_pp3_iter3) & (((1'd0 == ap_reg_pp3_iter2_icmp_reg_1087) & (1'b0 == OUTPUT_r_BVALID)) | ((ap_reg_pp3_iter2_icmp_reg_1087 == 1'd1) & (1'b0 == OUTPUT_r_BVALID))));
end

always @ (*) begin
    ap_block_pp3_stage1_flag00011011 = ((1'b1 == ap_enable_reg_pp3_iter3) & (((1'd0 == ap_reg_pp3_iter2_icmp_reg_1087) & (1'b0 == OUTPUT_r_BVALID)) | ((ap_reg_pp3_iter2_icmp_reg_1087 == 1'd1) & (1'b0 == OUTPUT_r_BVALID))));
end

assign ap_block_pp3_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage3_flag00011001 = ((1'b1 == ap_enable_reg_pp3_iter1) & (1'b1 == ap_block_state35_io));
end

always @ (*) begin
    ap_block_pp3_stage3_flag00011011 = ((1'b1 == ap_enable_reg_pp3_iter1) & (1'b1 == ap_block_state35_io));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((exitcond6_reg_912 == 1'd0) & (1'b0 == INPUT_r_RVALID));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp2_stage0_iter1 = ((1'd0 == exitcond3_reg_956) & (1'b0 == INPUT_r_RVALID));
end

assign ap_block_state26_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_io = (((1'd0 == icmp_reg_1087) & (1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY)) | ((icmp_reg_1087 == 1'd1) & (1'b0 == ap_sig_ioackin_OUTPUT_r_AWREADY)));
end

assign ap_block_state35_pp3_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_io = (((1'd0 == icmp_reg_1087) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)) | ((icmp_reg_1087 == 1'd1) & (1'b0 == ap_sig_ioackin_OUTPUT_r_WREADY)));
end

assign ap_block_state36_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_pp3_stage1_iter3 = (((1'd0 == ap_reg_pp3_iter2_icmp_reg_1087) & (1'b0 == OUTPUT_r_BVALID)) | ((ap_reg_pp3_iter2_icmp_reg_1087 == 1'd1) & (1'b0 == OUTPUT_r_BVALID)));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1437 = ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_enable_reg_pp3_iter1) & (ap_block_pp3_stage3_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_OUTPUT_r_AWREADY));
end

always @ (*) begin
    ap_condition_1440 = ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter2) & (ap_block_pp3_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_OUTPUT_r_WREADY));
end

always @ (*) begin
    ap_condition_502 = ((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage1_flag00011001 == 1'b0));
end

always @ (*) begin
    ap_condition_508 = ((1'b1 == ap_enable_reg_pp3_iter1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_flag00011001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_422_p2 = ((k_phi_fu_327_p4 == 12'd2048) ? 1'b1 : 1'b0);

assign exitcond2_fu_410_p2 = ((i_reg_311 == 9'd257) ? 1'b1 : 1'b0);

assign exitcond3_fu_475_p2 = ((indvar1_reg_335 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond6_fu_388_p2 = ((indvar_phi_fu_303_p4 == 12'd3072) ? 1'b1 : 1'b0);

assign exitcond_fu_510_p2 = ((posx_assign_phi_fu_350_p4 == 10'd1023) ? 1'b1 : 1'b0);

assign i_1_fu_878_p2 = (i_reg_311 + 9'd1);

assign icmp_fu_813_p2 = ((tmp_14_fu_803_p4 == 4'd0) ? 1'b1 : 1'b0);

assign indvar_next1_fu_481_p2 = (indvar1_reg_335 + 11'd1);

assign indvar_next_fu_394_p2 = (indvar_phi_fu_303_p4 + 12'd1);

assign input2_sum5_cast_fu_465_p1 = $signed(input2_sum5_fu_460_p2);

assign input2_sum5_fu_460_p2 = ($signed(tmp_21_cast_reg_907) + $signed(tmp_3_cast_fu_456_p1));

assign j_fu_520_p2 = (10'd1 + posx_assign_phi_fu_350_p4);

assign k_1_fu_428_p2 = (k_phi_fu_327_p4 + 12'd1);

assign neg3_fu_765_p2 = (11'd0 - res_1_fu_759_p2);

assign neg_fu_725_p2 = (11'd0 - res_reg_1040);

assign output4_sum7_cast_fu_836_p1 = $signed(output4_sum7_fu_831_p2);

assign output4_sum7_fu_831_p2 = ($signed(tmp_14_cast_fu_827_p1) + $signed(tmp_20_cast_reg_901));

assign output4_sum_cast_fu_868_p1 = $signed(output4_sum_fu_863_p2);

assign output4_sum_fu_863_p2 = ($signed(tmp_17_cast_fu_859_p1) + $signed(tmp_20_cast_reg_901));

assign p_fu_797_p2 = ($signed(abs_cast4_fu_781_p1) + $signed(abs5_cast3_fu_789_p1));

assign position_1_fu_499_p2 = (position_fu_166 + 32'd1);

assign posx_assign_cast8_fu_516_p1 = posx_assign_phi_fu_350_p4;

assign posx_assign_cast_fu_542_p1 = posx_assign_reg_346;

assign res_1_fu_759_p2 = (res_4_i_fu_754_p2 - tmp_40_i_cast_fu_722_p1);

assign res_2_cast5_fu_587_p1 = small_input_q1;

assign res_2_cast_fu_591_p1 = small_input_q1;

assign res_2_i_cast_fu_713_p1 = res_2_i_fu_707_p2;

assign res_2_i_fu_707_p2 = (tmp2_cast_fu_704_p1 + tmp_20_i_cast_fu_700_p1);

assign res_3_i_fu_717_p2 = (res_2_i_cast_fu_713_p1 - tmp_50_i_cast_reg_1035);

assign res_4_i_fu_754_p2 = (res_3_i_reg_1057 - tmp_30_i_cast_fu_750_p1);

assign res_7_i_cast_fu_631_p1 = res_7_i_fu_625_p2;

assign res_7_i_fu_625_p2 = (tmp1_cast_fu_621_p1 + tmp_37_i_cast_fu_580_p1);

assign res_8_i_fu_635_p2 = (res_7_i_cast_fu_631_p1 - res_2_cast_fu_591_p1);

assign res_9_i_fu_663_p2 = (res_8_i_reg_1025 - tmp_47_i_cast_fu_655_p1);

assign res_cast_fu_568_p1 = reg_367;

assign res_fu_668_p2 = (res_9_i_fu_663_p2 - tmp_50_i_cast_fu_659_p1);

assign tmp1_cast_fu_621_p1 = tmp1_fu_615_p2;

assign tmp1_fu_615_p2 = (res_cast_fu_568_p1 + tmp_40_i_cast6_fu_584_p1);

assign tmp2_cast_fu_704_p1 = tmp2_reg_1030;

assign tmp2_fu_641_p2 = (res_2_cast5_fu_587_p1 + res_cast_fu_568_p1);

assign tmp_11_fu_777_p1 = abs_fu_735_p3[7:0];

assign tmp_12_fu_793_p1 = abs5_fu_784_p3[7:0];

assign tmp_13_fu_819_p3 = {{i_reg_311}, {ap_reg_pp3_iter1_posx_assign_reg_346}};

assign tmp_14_cast_fu_827_p1 = tmp_13_fu_819_p3;

assign tmp_14_fu_803_p4 = {{p_fu_797_p2[11:8]}};

assign tmp_15_fu_846_p2 = (tmp_12_fu_793_p1 + tmp_11_reg_1082);

assign tmp_16_fu_851_p3 = {{i_reg_311}, {ap_reg_pp3_iter1_posx_assign_reg_346}};

assign tmp_17_cast_fu_859_p1 = tmp_16_fu_851_p3;

assign tmp_18_i_fu_674_p1 = posx_assign_reg_346;

assign tmp_1_fu_416_p2 = ((i_reg_311 == 9'd1) ? 1'b1 : 1'b0);

assign tmp_20_cast_fu_382_p1 = $signed(output_read_reg_884);

assign tmp_20_i_cast_fu_700_p1 = tmp_20_i_fu_692_p3;

assign tmp_20_i_fu_692_p3 = {{small_input_q0}, {1'd0}};

assign tmp_21_cast_fu_385_p1 = $signed(input_read_reg_889);

assign tmp_27_i_fu_679_p3 = {{2'd2}, {posx_assign_reg_346}};

assign tmp_28_i_fu_687_p1 = tmp_27_i_fu_679_p3;

assign tmp_2_fu_372_p1 = $signed(input_read_reg_889);

assign tmp_30_i_cast_fu_750_p1 = tmp_30_i_fu_742_p3;

assign tmp_30_i_fu_742_p3 = {{reg_367}, {1'd0}};

assign tmp_34_i_fu_546_p2 = ($signed(11'd1025) + $signed(posx_assign_cast_fu_542_p1));

assign tmp_35_i_fu_552_p1 = tmp_34_i_fu_546_p2;

assign tmp_37_i_cast_fu_580_p1 = tmp_37_i_fu_572_p3;

assign tmp_37_i_fu_572_p3 = {{small_input_q0}, {1'd0}};

assign tmp_38_i_fu_531_p2 = ($signed(12'd2049) + $signed(posx_assign_cast8_fu_516_p1));

assign tmp_39_i_fu_537_p1 = tmp_38_i_fu_531_p2;

assign tmp_3_cast_fu_456_p1 = $signed(tmp_3_fu_450_p2);

assign tmp_3_fu_450_p2 = position_fu_166 << 32'd10;

assign tmp_40_i_cast6_fu_584_p1 = small_input_load_3_reg_1004;

assign tmp_40_i_cast_fu_722_p1 = small_input_load_3_reg_1004;

assign tmp_41_i_fu_557_p2 = ($signed(10'd1023) + $signed(posx_assign_reg_346));

assign tmp_42_i_fu_563_p1 = tmp_41_i_fu_557_p2;

assign tmp_44_i_fu_595_p2 = (11'd1023 + posx_assign_cast_reg_994);

assign tmp_45_i_fu_600_p1 = tmp_44_i_fu_595_p2;

assign tmp_47_i_cast_fu_655_p1 = tmp_47_i_fu_647_p3;

assign tmp_47_i_fu_647_p3 = {{small_input_q0}, {1'd0}};

assign tmp_48_i_fu_605_p2 = (12'd2047 + posx_assign_cast8_reg_974);

assign tmp_49_i_fu_610_p1 = tmp_48_i_fu_605_p2;

assign tmp_4_fu_434_p2 = (k_phi_fu_327_p4 + 12'd1024);

assign tmp_50_i_cast_fu_659_p1 = small_input_q1;

assign tmp_5_fu_440_p1 = tmp_4_fu_434_p2;

assign tmp_6_fu_445_p1 = k_reg_323;

assign tmp_7_fu_495_p1 = ap_reg_pp2_iter1_tmp_9_reg_965;

assign tmp_9_fu_487_p3 = {{1'd1}, {indvar1_reg_335}};

assign tmp_fu_400_p1 = ap_reg_pp0_iter1_indvar_reg_299;

assign tmp_i_fu_526_p1 = j_fu_520_p2;

always @ (posedge ap_clk) begin
    tmp_9_reg_965[11] <= 1'b1;
    ap_reg_pp2_iter1_tmp_9_reg_965[11] <= 1'b1;
    posx_assign_cast8_reg_974[11:10] <= 2'b00;
    posx_assign_cast_reg_994[10] <= 1'b0;
    tmp_50_i_cast_reg_1035[10:8] <= 3'b000;
end

endmodule //sobel_sw_new
