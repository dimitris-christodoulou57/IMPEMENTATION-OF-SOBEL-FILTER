-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_sw_new is
generic (
    C_M_AXI_INPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_INPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_WREADY : IN STD_LOGIC;
    m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RVALID : IN STD_LOGIC;
    m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_RLAST : IN STD_LOGIC;
    m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BVALID : IN STD_LOGIC;
    m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel_sw_new is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_sw_new,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.561667,HLS_SYN_LAT=1447691,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=3047,HLS_SYN_LUT=2753}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_pp3_stage3 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_C00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv9_101 : STD_LOGIC_VECTOR (8 downto 0) := "100000001";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv12_801 : STD_LOGIC_VECTOR (11 downto 0) := "100000000001";
    constant ap_const_lv11_401 : STD_LOGIC_VECTOR (10 downto 0) := "10000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv12_7FF : STD_LOGIC_VECTOR (11 downto 0) := "011111111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_r : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_r : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal INPUT_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond6_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00000000 : BOOLEAN;
    signal exitcond3_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage3 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage3_flag00000000 : BOOLEAN;
    signal icmp_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_flag00000000 : BOOLEAN;
    signal OUTPUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_block_pp3_stage1_flag00000000 : BOOLEAN;
    signal ap_reg_pp3_iter2_icmp_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_AWREADY : STD_LOGIC;
    signal INPUT_r_WREADY : STD_LOGIC;
    signal INPUT_r_ARVALID : STD_LOGIC;
    signal INPUT_r_ARREADY : STD_LOGIC;
    signal INPUT_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RVALID : STD_LOGIC;
    signal INPUT_r_RREADY : STD_LOGIC;
    signal INPUT_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_r_RLAST : STD_LOGIC;
    signal INPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BVALID : STD_LOGIC;
    signal INPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_AWVALID : STD_LOGIC;
    signal OUTPUT_r_AWREADY : STD_LOGIC;
    signal OUTPUT_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_WVALID : STD_LOGIC;
    signal OUTPUT_r_WREADY : STD_LOGIC;
    signal OUTPUT_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_r_ARREADY : STD_LOGIC;
    signal OUTPUT_r_RVALID : STD_LOGIC;
    signal OUTPUT_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_r_RLAST : STD_LOGIC;
    signal OUTPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BVALID : STD_LOGIC;
    signal OUTPUT_r_BREADY : STD_LOGIC;
    signal OUTPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_299 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter1_indvar_reg_299 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal k_reg_323 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar1_reg_335 : STD_LOGIC_VECTOR (10 downto 0);
    signal posx_assign_reg_346 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp3_iter1_posx_assign_reg_346 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state28_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_OUTPUT_r_WREADY : STD_LOGIC;
    signal ap_block_state36_io : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_pp3_stage0_flag00011001 : BOOLEAN;
    signal reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state24_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_flag00011001 : BOOLEAN;
    signal small_input_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state29_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state33_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_state37_pp3_stage1_iter2 : BOOLEAN;
    signal ap_block_state41_pp3_stage1_iter3 : BOOLEAN;
    signal ap_block_pp3_stage1_flag00011001 : BOOLEAN;
    signal exitcond_reg_970 : STD_LOGIC_VECTOR (0 downto 0);
    signal small_input_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_read_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_read_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_INPUT_r_ARREADY : STD_LOGIC;
    signal tmp_20_cast_fu_382_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_20_cast_reg_901 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_21_cast_fu_385_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_21_cast_reg_907 : STD_LOGIC_VECTOR (32 downto 0);
    signal exitcond6_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond6_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_394_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_next_reg_916 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond2_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_936 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state14_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal k_1_fu_428_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_1_reg_940 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal INPUT_addr_1_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond3_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter1_exitcond3_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_481_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_9_fu_487_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_reg_965 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp2_iter1_tmp_9_reg_965 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp3_iter1_exitcond_reg_970 : STD_LOGIC_VECTOR (0 downto 0);
    signal posx_assign_cast8_fu_516_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal posx_assign_cast8_reg_974 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_520_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_979 : STD_LOGIC_VECTOR (9 downto 0);
    signal posx_assign_cast_fu_542_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal posx_assign_cast_reg_994 : STD_LOGIC_VECTOR (10 downto 0);
    signal small_input_load_3_reg_1004 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_block_state30_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_state34_pp3_stage2_iter1 : BOOLEAN;
    signal ap_block_state38_pp3_stage2_iter2 : BOOLEAN;
    signal ap_block_pp3_stage2_flag00011001 : BOOLEAN;
    signal res_8_i_fu_635_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_8_i_reg_1025 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_641_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_reg_1030 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_i_cast_fu_659_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_i_cast_reg_1035 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state31_pp3_stage3_iter0 : BOOLEAN;
    signal ap_block_state35_pp3_stage3_iter1 : BOOLEAN;
    signal ap_sig_ioackin_OUTPUT_r_AWREADY : STD_LOGIC;
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_state39_pp3_stage3_iter2 : BOOLEAN;
    signal ap_block_pp3_stage3_flag00011001 : BOOLEAN;
    signal res_fu_668_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_reg_1040 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_3_i_fu_717_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_3_i_reg_1057 : STD_LOGIC_VECTOR (10 downto 0);
    signal abs_fu_735_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal abs_reg_1062 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_1_fu_759_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_1_reg_1067 : STD_LOGIC_VECTOR (10 downto 0);
    signal neg3_fu_765_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal neg3_reg_1072 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond4_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abscond4_reg_1077 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_777_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1082 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_846_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_1096 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_addr_1_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_878_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_pp2_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state24 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp3_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state28 : STD_LOGIC;
    signal ap_block_pp3_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp3_stage1_flag00011011 : BOOLEAN;
    signal small_input_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal small_input_ce0 : STD_LOGIC;
    signal small_input_we0 : STD_LOGIC;
    signal small_input_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal small_input_ce1 : STD_LOGIC;
    signal small_input_we1 : STD_LOGIC;
    signal small_input_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_phi_fu_303_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_311 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal k_phi_fu_327_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal posx_assign_phi_fu_350_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_i_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_i_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_i_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_i_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage2_flag00000000 : BOOLEAN;
    signal tmp_49_i_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_i_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_i_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input2_sum5_cast_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output4_sum7_cast_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output4_sum_cast_fu_868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_INPUT_r_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUTPUT_r_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp3_stage3_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_OUTPUT_r_WREADY : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_flag00001001 : BOOLEAN;
    signal position_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal position_1_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_434_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_fu_456_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal input2_sum5_fu_460_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_38_i_fu_531_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_i_fu_546_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_i_fu_557_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_i_fu_572_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_i_fu_595_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_i_fu_605_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal res_cast_fu_568_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_i_cast6_fu_584_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_615_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_621_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_i_cast_fu_580_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal res_7_i_fu_625_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal res_7_i_cast_fu_631_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_2_cast_fu_591_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_2_cast5_fu_587_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_i_fu_647_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_i_cast_fu_655_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_9_i_fu_663_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_i_fu_679_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_i_fu_692_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_cast_fu_704_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_i_cast_fu_700_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal res_2_i_fu_707_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal res_2_i_cast_fu_713_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_725_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_i_fu_742_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_i_cast_fu_750_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_4_i_fu_754_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_i_cast_fu_722_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal abs5_fu_784_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal abs_cast4_fu_781_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal abs5_cast3_fu_789_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_fu_797_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_803_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_819_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_14_cast_fu_827_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal output4_sum7_fu_831_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_12_fu_793_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_851_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_17_cast_fu_859_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal output4_sum_fu_863_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp3_stage2_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_condition_1437 : BOOLEAN;
    signal ap_condition_1440 : BOOLEAN;
    signal ap_condition_502 : BOOLEAN;
    signal ap_condition_508 : BOOLEAN;

    component sobel_sw_new_smalbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_sw_new_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_r_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_sw_new_INPUT_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sobel_sw_new_OUTPUT_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sobel_sw_new_CTRL_BUS_s_axi_U : component sobel_sw_new_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_r_r => input_r_r,
        output_r_r => output_r_r);

    sobel_sw_new_INPUT_r_m_axi_U : component sobel_sw_new_INPUT_r_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_r_AWVALID,
        AWREADY => m_axi_INPUT_r_AWREADY,
        AWADDR => m_axi_INPUT_r_AWADDR,
        AWID => m_axi_INPUT_r_AWID,
        AWLEN => m_axi_INPUT_r_AWLEN,
        AWSIZE => m_axi_INPUT_r_AWSIZE,
        AWBURST => m_axi_INPUT_r_AWBURST,
        AWLOCK => m_axi_INPUT_r_AWLOCK,
        AWCACHE => m_axi_INPUT_r_AWCACHE,
        AWPROT => m_axi_INPUT_r_AWPROT,
        AWQOS => m_axi_INPUT_r_AWQOS,
        AWREGION => m_axi_INPUT_r_AWREGION,
        AWUSER => m_axi_INPUT_r_AWUSER,
        WVALID => m_axi_INPUT_r_WVALID,
        WREADY => m_axi_INPUT_r_WREADY,
        WDATA => m_axi_INPUT_r_WDATA,
        WSTRB => m_axi_INPUT_r_WSTRB,
        WLAST => m_axi_INPUT_r_WLAST,
        WID => m_axi_INPUT_r_WID,
        WUSER => m_axi_INPUT_r_WUSER,
        ARVALID => m_axi_INPUT_r_ARVALID,
        ARREADY => m_axi_INPUT_r_ARREADY,
        ARADDR => m_axi_INPUT_r_ARADDR,
        ARID => m_axi_INPUT_r_ARID,
        ARLEN => m_axi_INPUT_r_ARLEN,
        ARSIZE => m_axi_INPUT_r_ARSIZE,
        ARBURST => m_axi_INPUT_r_ARBURST,
        ARLOCK => m_axi_INPUT_r_ARLOCK,
        ARCACHE => m_axi_INPUT_r_ARCACHE,
        ARPROT => m_axi_INPUT_r_ARPROT,
        ARQOS => m_axi_INPUT_r_ARQOS,
        ARREGION => m_axi_INPUT_r_ARREGION,
        ARUSER => m_axi_INPUT_r_ARUSER,
        RVALID => m_axi_INPUT_r_RVALID,
        RREADY => m_axi_INPUT_r_RREADY,
        RDATA => m_axi_INPUT_r_RDATA,
        RLAST => m_axi_INPUT_r_RLAST,
        RID => m_axi_INPUT_r_RID,
        RUSER => m_axi_INPUT_r_RUSER,
        RRESP => m_axi_INPUT_r_RRESP,
        BVALID => m_axi_INPUT_r_BVALID,
        BREADY => m_axi_INPUT_r_BREADY,
        BRESP => m_axi_INPUT_r_BRESP,
        BID => m_axi_INPUT_r_BID,
        BUSER => m_axi_INPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_r_ARVALID,
        I_ARREADY => INPUT_r_ARREADY,
        I_ARADDR => INPUT_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => INPUT_r_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => INPUT_r_RVALID,
        I_RREADY => INPUT_r_RREADY,
        I_RDATA => INPUT_r_RDATA,
        I_RID => INPUT_r_RID,
        I_RUSER => INPUT_r_RUSER,
        I_RRESP => INPUT_r_RRESP,
        I_RLAST => INPUT_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_r_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => INPUT_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_r_BRESP,
        I_BID => INPUT_r_BID,
        I_BUSER => INPUT_r_BUSER);

    sobel_sw_new_OUTPUT_r_m_axi_U : component sobel_sw_new_OUTPUT_r_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUTPUT_r_AWVALID,
        AWREADY => m_axi_OUTPUT_r_AWREADY,
        AWADDR => m_axi_OUTPUT_r_AWADDR,
        AWID => m_axi_OUTPUT_r_AWID,
        AWLEN => m_axi_OUTPUT_r_AWLEN,
        AWSIZE => m_axi_OUTPUT_r_AWSIZE,
        AWBURST => m_axi_OUTPUT_r_AWBURST,
        AWLOCK => m_axi_OUTPUT_r_AWLOCK,
        AWCACHE => m_axi_OUTPUT_r_AWCACHE,
        AWPROT => m_axi_OUTPUT_r_AWPROT,
        AWQOS => m_axi_OUTPUT_r_AWQOS,
        AWREGION => m_axi_OUTPUT_r_AWREGION,
        AWUSER => m_axi_OUTPUT_r_AWUSER,
        WVALID => m_axi_OUTPUT_r_WVALID,
        WREADY => m_axi_OUTPUT_r_WREADY,
        WDATA => m_axi_OUTPUT_r_WDATA,
        WSTRB => m_axi_OUTPUT_r_WSTRB,
        WLAST => m_axi_OUTPUT_r_WLAST,
        WID => m_axi_OUTPUT_r_WID,
        WUSER => m_axi_OUTPUT_r_WUSER,
        ARVALID => m_axi_OUTPUT_r_ARVALID,
        ARREADY => m_axi_OUTPUT_r_ARREADY,
        ARADDR => m_axi_OUTPUT_r_ARADDR,
        ARID => m_axi_OUTPUT_r_ARID,
        ARLEN => m_axi_OUTPUT_r_ARLEN,
        ARSIZE => m_axi_OUTPUT_r_ARSIZE,
        ARBURST => m_axi_OUTPUT_r_ARBURST,
        ARLOCK => m_axi_OUTPUT_r_ARLOCK,
        ARCACHE => m_axi_OUTPUT_r_ARCACHE,
        ARPROT => m_axi_OUTPUT_r_ARPROT,
        ARQOS => m_axi_OUTPUT_r_ARQOS,
        ARREGION => m_axi_OUTPUT_r_ARREGION,
        ARUSER => m_axi_OUTPUT_r_ARUSER,
        RVALID => m_axi_OUTPUT_r_RVALID,
        RREADY => m_axi_OUTPUT_r_RREADY,
        RDATA => m_axi_OUTPUT_r_RDATA,
        RLAST => m_axi_OUTPUT_r_RLAST,
        RID => m_axi_OUTPUT_r_RID,
        RUSER => m_axi_OUTPUT_r_RUSER,
        RRESP => m_axi_OUTPUT_r_RRESP,
        BVALID => m_axi_OUTPUT_r_BVALID,
        BREADY => m_axi_OUTPUT_r_BREADY,
        BRESP => m_axi_OUTPUT_r_BRESP,
        BID => m_axi_OUTPUT_r_BID,
        BUSER => m_axi_OUTPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUTPUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_r_RDATA,
        I_RID => OUTPUT_r_RID,
        I_RUSER => OUTPUT_r_RUSER,
        I_RRESP => OUTPUT_r_RRESP,
        I_RLAST => OUTPUT_r_RLAST,
        I_AWVALID => OUTPUT_r_AWVALID,
        I_AWREADY => OUTPUT_r_AWREADY,
        I_AWADDR => OUTPUT_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUTPUT_r_WVALID,
        I_WREADY => OUTPUT_r_WREADY,
        I_WDATA => OUTPUT_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => OUTPUT_r_BVALID,
        I_BREADY => OUTPUT_r_BREADY,
        I_BRESP => OUTPUT_r_BRESP,
        I_BID => OUTPUT_r_BID,
        I_BUSER => OUTPUT_r_BUSER);

    small_input_U : component sobel_sw_new_smalbkb
    generic map (
        DataWidth => 8,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => small_input_address0,
        ce0 => small_input_ce0,
        we0 => small_input_we0,
        d0 => reg_361,
        q0 => small_input_q0,
        address1 => small_input_address1,
        ce1 => small_input_ce1,
        we1 => small_input_we1,
        d1 => small_input_d1,
        q1 => small_input_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state9 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond2_fu_410_p2) and (ap_const_lv1_0 = tmp_1_fu_416_p2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state14 xor ap_const_logic_1);
                elsif ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond2_fu_410_p2) and (ap_const_lv1_0 = tmp_1_fu_416_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state24))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state24)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state24 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state28))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_block_pp3_stage3_flag00011011 = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state28)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_condition_pp3_exit_iter0_state28 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_block_pp3_stage3_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_block_pp3_stage3_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_block_pp3_stage1_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_INPUT_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_INPUT_r_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_INPUT_r_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_sig_ioackin_INPUT_r_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_INPUT_r_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = INPUT_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_logic_1 = INPUT_r_ARREADY)))) then 
                    ap_reg_ioackin_INPUT_r_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = icmp_reg_1087) and (ap_block_pp3_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (icmp_reg_1087 = ap_const_lv1_1) and (ap_block_pp3_stage3_flag00011001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = icmp_reg_1087) and (ap_const_logic_1 = OUTPUT_r_AWREADY) and (ap_block_pp3_stage3_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (icmp_reg_1087 = ap_const_lv1_1) and (ap_const_logic_1 = OUTPUT_r_AWREADY) and (ap_block_pp3_stage3_flag00001001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_r_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_0 = icmp_reg_1087) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (icmp_reg_1087 = ap_const_lv1_1) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_OUTPUT_r_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_0 = icmp_reg_1087) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_logic_1 = OUTPUT_r_WREADY) and (ap_block_pp3_stage0_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (icmp_reg_1087 = ap_const_lv1_1) and (ap_const_logic_1 = OUTPUT_r_WREADY) and (ap_block_pp3_stage0_flag00001001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_OUTPUT_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_reg_311 <= ap_const_lv9_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_reg_311 <= i_1_fu_878_p2;
            end if; 
        end if;
    end process;

    indvar1_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond3_fu_475_p2))) then 
                indvar1_reg_335 <= indvar_next1_fu_481_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar1_reg_335 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_912 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                indvar_reg_299 <= indvar_next_reg_916;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_reg_299 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    k_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond2_fu_410_p2) and (ap_const_lv1_0 = tmp_1_fu_416_p2))) then 
                k_reg_323 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_936))) then 
                k_reg_323 <= k_1_reg_940;
            end if; 
        end if;
    end process;

    position_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = tmp_1_reg_932))) then 
                position_fu_166 <= position_1_fu_499_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                position_fu_166 <= ap_const_lv32_3;
            end if; 
        end if;
    end process;

    posx_assign_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_970))) then 
                posx_assign_reg_346 <= j_reg_979;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                posx_assign_reg_346 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = exitcond_reg_970)) then
                if ((ap_condition_508 = ap_const_boolean_1)) then 
                    reg_367 <= small_input_q1;
                elsif ((ap_condition_502 = ap_const_boolean_1)) then 
                    reg_367 <= small_input_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                INPUT_addr_1_reg_950 <= input2_sum5_cast_fu_465_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_block_pp3_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = icmp_fu_813_p2))) then
                OUTPUT_addr_1_reg_1101 <= output4_sum_cast_fu_868_p1(32 - 1 downto 0);
                tmp_15_reg_1096 <= tmp_15_fu_846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_block_pp3_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = icmp_fu_813_p2))) then
                OUTPUT_addr_reg_1091 <= output4_sum7_cast_fu_836_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_block_pp3_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp3_iter1_exitcond_reg_970))) then
                abs_reg_1062 <= abs_fu_735_p3;
                abscond4_reg_1077 <= abscond4_fu_771_p2;
                neg3_reg_1072 <= neg3_fu_765_p2;
                res_1_reg_1067 <= res_1_fu_759_p2;
                tmp_11_reg_1082 <= tmp_11_fu_777_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond6_reg_912 <= exitcond6_reg_912;
                ap_reg_pp0_iter1_indvar_reg_299 <= indvar_reg_299;
                exitcond6_reg_912 <= exitcond6_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp2_iter1_exitcond3_reg_956 <= exitcond3_reg_956;
                    ap_reg_pp2_iter1_tmp_9_reg_965(10 downto 0) <= tmp_9_reg_965(10 downto 0);
                exitcond3_reg_956 <= exitcond3_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp3_iter1_exitcond_reg_970 <= exitcond_reg_970;
                ap_reg_pp3_iter1_posx_assign_reg_346 <= posx_assign_reg_346;
                exitcond_reg_970 <= exitcond_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_block_pp3_stage2_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp3_iter2_icmp_reg_1087 <= icmp_reg_1087;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                exitcond1_reg_936 <= exitcond1_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_block_pp3_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp3_iter1_exitcond_reg_970))) then
                icmp_reg_1087 <= icmp_fu_813_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_next_reg_916 <= indvar_next_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_read_reg_889 <= input_r_r;
                output_read_reg_884 <= output_r_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_0 = exitcond_fu_510_p2))) then
                j_reg_979 <= j_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then
                k_1_reg_940 <= k_1_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_fu_510_p2))) then
                    posx_assign_cast8_reg_974(9 downto 0) <= posx_assign_cast8_fu_516_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_block_pp3_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_970))) then
                    posx_assign_cast_reg_994(9 downto 0) <= posx_assign_cast_fu_542_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_912 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_956) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0)))) then
                reg_361 <= INPUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_970))) then
                res_3_i_reg_1057 <= res_3_i_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_reg_970) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_block_pp3_stage2_flag00011001 = ap_const_boolean_0))) then
                res_8_i_reg_1025 <= res_8_i_fu_635_p2;
                tmp2_reg_1030 <= tmp2_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_lv1_0 = exitcond_reg_970) and (ap_block_pp3_stage3_flag00011001 = ap_const_boolean_0))) then
                res_reg_1040 <= res_fu_668_p2;
                    tmp_50_i_cast_reg_1035(7 downto 0) <= tmp_50_i_cast_fu_659_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_970))) then
                small_input_load_3_reg_1004 <= small_input_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond2_fu_410_p2))) then
                tmp_1_reg_932 <= tmp_1_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_20_cast_reg_901 <= tmp_20_cast_fu_382_p1;
                tmp_21_cast_reg_907 <= tmp_21_cast_fu_385_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond3_fu_475_p2))) then
                    tmp_9_reg_965(10 downto 0) <= tmp_9_fu_487_p3(10 downto 0);
            end if;
        end if;
    end process;
    tmp_9_reg_965(11) <= '1';
    ap_reg_pp2_iter1_tmp_9_reg_965(11) <= '1';
    posx_assign_cast8_reg_974(11 downto 10) <= "00";
    posx_assign_cast_reg_994(10) <= '0';
    tmp_50_i_cast_reg_1035(10 downto 8) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state17, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter0, ap_sig_ioackin_INPUT_r_ARREADY, exitcond6_fu_388_p2, ap_enable_reg_pp0_iter0, exitcond2_fu_410_p2, ap_CS_fsm_state13, tmp_1_fu_416_p2, exitcond1_fu_422_p2, ap_enable_reg_pp1_iter0, exitcond3_fu_475_p2, ap_enable_reg_pp2_iter0, exitcond_fu_510_p2, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_flag00011011, ap_block_pp2_stage0_flag00011011, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_flag00011011, ap_block_pp3_stage3_flag00011011, ap_block_pp3_stage1_flag00011011, ap_block_pp3_stage2_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_INPUT_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond6_fu_388_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond6_fu_388_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond2_fu_410_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond2_fu_410_p2) and (ap_const_lv1_0 = tmp_1_fu_416_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond1_fu_422_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond1_fu_422_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_sig_ioackin_INPUT_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond3_fu_475_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond3_fu_475_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (((ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_fu_510_p2) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_fu_510_p2) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if (((ap_block_pp3_stage1_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter3) and (ap_block_pp3_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter3) and (ap_block_pp3_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((ap_block_pp3_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_pp3_stage3 => 
                if ((ap_block_pp3_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_r_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state17, INPUT_addr_1_reg_950, tmp_2_fu_372_p1, ap_reg_ioackin_INPUT_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_INPUT_r_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                INPUT_r_ARADDR <= INPUT_addr_1_reg_950;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                INPUT_r_ARADDR <= tmp_2_fu_372_p1(32 - 1 downto 0);
            else 
                INPUT_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            INPUT_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_r_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state17, ap_reg_ioackin_INPUT_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_INPUT_r_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                INPUT_r_ARLEN <= ap_const_lv32_400;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                INPUT_r_ARLEN <= ap_const_lv32_C00;
            else 
                INPUT_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            INPUT_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_r_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state17, ap_reg_ioackin_INPUT_r_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_logic_0 = ap_reg_ioackin_INPUT_r_ARREADY)))) then 
            INPUT_r_ARVALID <= ap_const_logic_1;
        else 
            INPUT_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond6_reg_912, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_956, ap_block_pp0_stage0_flag00011001, ap_block_pp2_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_912 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_956) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0)))) then 
            INPUT_r_RREADY <= ap_const_logic_1;
        else 
            INPUT_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_blk_n_AR_assign_proc : process(m_axi_INPUT_r_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            INPUT_r_blk_n_AR <= m_axi_INPUT_r_ARREADY;
        else 
            INPUT_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_r_blk_n_R_assign_proc : process(m_axi_INPUT_r_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond6_reg_912, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000, exitcond3_reg_956)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond6_reg_912 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond3_reg_956)))) then 
            INPUT_r_blk_n_R <= m_axi_INPUT_r_RVALID;
        else 
            INPUT_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_AWADDR_assign_proc : process(icmp_reg_1087, OUTPUT_addr_reg_1091, OUTPUT_addr_1_reg_1101, ap_condition_1437)
    begin
        if ((ap_condition_1437 = ap_const_boolean_1)) then
            if ((icmp_reg_1087 = ap_const_lv1_1)) then 
                OUTPUT_r_AWADDR <= OUTPUT_addr_1_reg_1101;
            elsif ((ap_const_lv1_0 = icmp_reg_1087)) then 
                OUTPUT_r_AWADDR <= OUTPUT_addr_reg_1091;
            else 
                OUTPUT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUTPUT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUTPUT_r_AWVALID_assign_proc : process(ap_CS_fsm_pp3_stage3, ap_enable_reg_pp3_iter1, icmp_reg_1087, ap_reg_ioackin_OUTPUT_r_AWREADY, ap_block_pp3_stage3_flag00001001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = icmp_reg_1087) and (ap_block_pp3_stage3_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (icmp_reg_1087 = ap_const_lv1_1) and (ap_block_pp3_stage3_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_AWREADY)))) then 
            OUTPUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_BREADY_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter3, ap_reg_pp3_iter2_icmp_reg_1087, ap_block_pp3_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter3) and (ap_const_lv1_0 = ap_reg_pp3_iter2_icmp_reg_1087) and (ap_block_pp3_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter3) and (ap_reg_pp3_iter2_icmp_reg_1087 = ap_const_lv1_1) and (ap_block_pp3_stage1_flag00011001 = ap_const_boolean_0)))) then 
            OUTPUT_r_BREADY <= ap_const_logic_1;
        else 
            OUTPUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_WDATA_assign_proc : process(icmp_reg_1087, tmp_15_reg_1096, ap_condition_1440)
    begin
        if ((ap_condition_1440 = ap_const_boolean_1)) then
            if ((icmp_reg_1087 = ap_const_lv1_1)) then 
                OUTPUT_r_WDATA <= tmp_15_reg_1096;
            elsif ((ap_const_lv1_0 = icmp_reg_1087)) then 
                OUTPUT_r_WDATA <= ap_const_lv8_FF;
            else 
                OUTPUT_r_WDATA <= "XXXXXXXX";
            end if;
        else 
            OUTPUT_r_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    OUTPUT_r_WVALID_assign_proc : process(icmp_reg_1087, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter2, ap_reg_ioackin_OUTPUT_r_WREADY, ap_block_pp3_stage0_flag00001001)
    begin
        if ((((ap_const_lv1_0 = icmp_reg_1087) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (icmp_reg_1087 = ap_const_lv1_1) and (ap_block_pp3_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_WREADY)))) then 
            OUTPUT_r_WVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_blk_n_AW_assign_proc : process(m_axi_OUTPUT_r_AWREADY, ap_CS_fsm_pp3_stage3, ap_enable_reg_pp3_iter1, ap_block_pp3_stage3_flag00000000, icmp_reg_1087)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_block_pp3_stage3_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = icmp_reg_1087)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_block_pp3_stage3_flag00000000 = ap_const_boolean_0) and (icmp_reg_1087 = ap_const_lv1_1)))) then 
            OUTPUT_r_blk_n_AW <= m_axi_OUTPUT_r_AWREADY;
        else 
            OUTPUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_B_assign_proc : process(m_axi_OUTPUT_r_BVALID, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter3, ap_block_pp3_stage1_flag00000000, ap_reg_pp3_iter2_icmp_reg_1087)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter3) and (ap_block_pp3_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp3_iter2_icmp_reg_1087)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter3) and (ap_block_pp3_stage1_flag00000000 = ap_const_boolean_0) and (ap_reg_pp3_iter2_icmp_reg_1087 = ap_const_lv1_1)))) then 
            OUTPUT_r_blk_n_B <= m_axi_OUTPUT_r_BVALID;
        else 
            OUTPUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_W_assign_proc : process(m_axi_OUTPUT_r_WREADY, icmp_reg_1087, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0_flag00000000)
    begin
        if ((((ap_const_lv1_0 = icmp_reg_1087) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_flag00000000 = ap_const_boolean_0) and (icmp_reg_1087 = ap_const_lv1_1)))) then 
            OUTPUT_r_blk_n_W <= m_axi_OUTPUT_r_WREADY;
        else 
            OUTPUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

        abs5_cast3_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs5_fu_784_p3),12));

    abs5_fu_784_p3 <= 
        res_1_reg_1067 when (abscond4_reg_1077(0) = '1') else 
        neg3_reg_1072;
        abs_cast4_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs_reg_1062),12));

    abs_fu_735_p3 <= 
        res_reg_1040 when (abscond_fu_730_p2(0) = '1') else 
        neg_fu_725_p2;
    abscond4_fu_771_p2 <= "1" when (signed(res_1_fu_759_p2) > signed(ap_const_lv11_0)) else "0";
    abscond_fu_730_p2 <= "1" when (signed(res_reg_1040) > signed(ap_const_lv11_0)) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(23);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(24);
    ap_CS_fsm_pp3_stage3 <= ap_CS_fsm(25);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state42 <= ap_CS_fsm(26);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond6_reg_912, INPUT_r_RVALID)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_912 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_r_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond6_reg_912, INPUT_r_RVALID)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_912 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_r_RVALID));
    end process;

        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond3_reg_956, INPUT_r_RVALID)
    begin
                ap_block_pp2_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_956) and (ap_const_logic_0 = INPUT_r_RVALID));
    end process;


    ap_block_pp2_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond3_reg_956, INPUT_r_RVALID)
    begin
                ap_block_pp2_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_956) and (ap_const_logic_0 = INPUT_r_RVALID));
    end process;

        ap_block_pp3_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state36_io)
    begin
                ap_block_pp3_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_boolean_1 = ap_block_state36_io));
    end process;


    ap_block_pp3_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state36_io)
    begin
                ap_block_pp3_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_boolean_1 = ap_block_state36_io));
    end process;

        ap_block_pp3_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage1_flag00011001_assign_proc : process(ap_enable_reg_pp3_iter3, ap_reg_pp3_iter2_icmp_reg_1087, OUTPUT_r_BVALID)
    begin
                ap_block_pp3_stage1_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter3) and (((ap_const_lv1_0 = ap_reg_pp3_iter2_icmp_reg_1087) and (ap_const_logic_0 = OUTPUT_r_BVALID)) or ((ap_reg_pp3_iter2_icmp_reg_1087 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_BVALID))));
    end process;


    ap_block_pp3_stage1_flag00011011_assign_proc : process(ap_enable_reg_pp3_iter3, ap_reg_pp3_iter2_icmp_reg_1087, OUTPUT_r_BVALID)
    begin
                ap_block_pp3_stage1_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter3) and (((ap_const_lv1_0 = ap_reg_pp3_iter2_icmp_reg_1087) and (ap_const_logic_0 = OUTPUT_r_BVALID)) or ((ap_reg_pp3_iter2_icmp_reg_1087 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_BVALID))));
    end process;

        ap_block_pp3_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage3_flag00011001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state35_io)
    begin
                ap_block_pp3_stage3_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_boolean_1 = ap_block_state35_io));
    end process;


    ap_block_pp3_stage3_flag00011011_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state35_io)
    begin
                ap_block_pp3_stage3_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_boolean_1 = ap_block_state35_io));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond6_reg_912, INPUT_r_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((exitcond6_reg_912 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_r_RVALID));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp2_stage0_iter1_assign_proc : process(exitcond3_reg_956, INPUT_r_RVALID)
    begin
                ap_block_state25_pp2_stage0_iter1 <= ((ap_const_lv1_0 = exitcond3_reg_956) and (ap_const_logic_0 = INPUT_r_RVALID));
    end process;

        ap_block_state26_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(icmp_reg_1087, ap_sig_ioackin_OUTPUT_r_AWREADY)
    begin
                ap_block_state35_io <= (((ap_const_lv1_0 = icmp_reg_1087) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)) or ((icmp_reg_1087 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_AWREADY)));
    end process;

        ap_block_state35_pp3_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_io_assign_proc : process(icmp_reg_1087, ap_sig_ioackin_OUTPUT_r_WREADY)
    begin
                ap_block_state36_io <= (((ap_const_lv1_0 = icmp_reg_1087) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY)) or ((icmp_reg_1087 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_OUTPUT_r_WREADY)));
    end process;

        ap_block_state36_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state41_pp3_stage1_iter3_assign_proc : process(ap_reg_pp3_iter2_icmp_reg_1087, OUTPUT_r_BVALID)
    begin
                ap_block_state41_pp3_stage1_iter3 <= (((ap_const_lv1_0 = ap_reg_pp3_iter2_icmp_reg_1087) and (ap_const_logic_0 = OUTPUT_r_BVALID)) or ((ap_reg_pp3_iter2_icmp_reg_1087 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_r_BVALID)));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1437_assign_proc : process(ap_CS_fsm_pp3_stage3, ap_enable_reg_pp3_iter1, ap_reg_ioackin_OUTPUT_r_AWREADY, ap_block_pp3_stage3_flag00001001)
    begin
                ap_condition_1437 <= ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_block_pp3_stage3_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_AWREADY));
    end process;


    ap_condition_1440_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter2, ap_reg_ioackin_OUTPUT_r_WREADY, ap_block_pp3_stage0_flag00001001)
    begin
                ap_condition_1440 <= ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_WREADY));
    end process;


    ap_condition_502_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_flag00011001)
    begin
                ap_condition_502 <= ((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage1_flag00011001 = ap_const_boolean_0));
    end process;


    ap_condition_508_assign_proc : process(ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_flag00011001)
    begin
                ap_condition_508 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0));
    end process;


    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond6_fu_388_p2)
    begin
        if ((ap_const_lv1_1 = exitcond6_fu_388_p2)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state14_assign_proc : process(exitcond1_fu_422_p2)
    begin
        if ((ap_const_lv1_1 = exitcond1_fu_422_p2)) then 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state24_assign_proc : process(exitcond3_fu_475_p2)
    begin
        if ((ap_const_lv1_1 = exitcond3_fu_475_p2)) then 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state28_assign_proc : process(exitcond_fu_510_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_fu_510_p2)) then 
            ap_condition_pp3_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(exitcond2_fu_410_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond2_fu_410_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1) and (ap_const_logic_0 = ap_enable_reg_pp2_iter2))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp3_iter0) and (ap_const_logic_0 = ap_enable_reg_pp3_iter1) and (ap_const_logic_0 = ap_enable_reg_pp3_iter2) and (ap_const_logic_0 = ap_enable_reg_pp3_iter3))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond2_fu_410_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond2_fu_410_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_INPUT_r_ARREADY_assign_proc : process(INPUT_r_ARREADY, ap_reg_ioackin_INPUT_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_INPUT_r_ARREADY)) then 
            ap_sig_ioackin_INPUT_r_ARREADY <= INPUT_r_ARREADY;
        else 
            ap_sig_ioackin_INPUT_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_r_AWREADY_assign_proc : process(OUTPUT_r_AWREADY, ap_reg_ioackin_OUTPUT_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_AWREADY)) then 
            ap_sig_ioackin_OUTPUT_r_AWREADY <= OUTPUT_r_AWREADY;
        else 
            ap_sig_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_r_WREADY_assign_proc : process(OUTPUT_r_WREADY, ap_reg_ioackin_OUTPUT_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_OUTPUT_r_WREADY)) then 
            ap_sig_ioackin_OUTPUT_r_WREADY <= OUTPUT_r_WREADY;
        else 
            ap_sig_ioackin_OUTPUT_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_422_p2 <= "1" when (k_phi_fu_327_p4 = ap_const_lv12_800) else "0";
    exitcond2_fu_410_p2 <= "1" when (i_reg_311 = ap_const_lv9_101) else "0";
    exitcond3_fu_475_p2 <= "1" when (indvar1_reg_335 = ap_const_lv11_400) else "0";
    exitcond6_fu_388_p2 <= "1" when (indvar_phi_fu_303_p4 = ap_const_lv12_C00) else "0";
    exitcond_fu_510_p2 <= "1" when (posx_assign_phi_fu_350_p4 = ap_const_lv10_3FF) else "0";
    i_1_fu_878_p2 <= std_logic_vector(unsigned(i_reg_311) + unsigned(ap_const_lv9_1));
    icmp_fu_813_p2 <= "1" when (tmp_14_fu_803_p4 = ap_const_lv4_0) else "0";
    indvar_next1_fu_481_p2 <= std_logic_vector(unsigned(indvar1_reg_335) + unsigned(ap_const_lv11_1));
    indvar_next_fu_394_p2 <= std_logic_vector(unsigned(indvar_phi_fu_303_p4) + unsigned(ap_const_lv12_1));

    indvar_phi_fu_303_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond6_reg_912, indvar_reg_299, indvar_next_reg_916)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond6_reg_912 = ap_const_lv1_0))) then 
            indvar_phi_fu_303_p4 <= indvar_next_reg_916;
        else 
            indvar_phi_fu_303_p4 <= indvar_reg_299;
        end if; 
    end process;

        input2_sum5_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input2_sum5_fu_460_p2),64));

    input2_sum5_fu_460_p2 <= std_logic_vector(signed(tmp_21_cast_reg_907) + signed(tmp_3_cast_fu_456_p1));
    j_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(posx_assign_phi_fu_350_p4));
    k_1_fu_428_p2 <= std_logic_vector(unsigned(k_phi_fu_327_p4) + unsigned(ap_const_lv12_1));

    k_phi_fu_327_p4_assign_proc : process(k_reg_323, exitcond1_reg_936, ap_CS_fsm_pp1_stage0, k_1_reg_940, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_936) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            k_phi_fu_327_p4 <= k_1_reg_940;
        else 
            k_phi_fu_327_p4 <= k_reg_323;
        end if; 
    end process;

    neg3_fu_765_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(res_1_fu_759_p2));
    neg_fu_725_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(res_reg_1040));
        output4_sum7_cast_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output4_sum7_fu_831_p2),64));

    output4_sum7_fu_831_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_827_p1) + unsigned(tmp_20_cast_reg_901));
        output4_sum_cast_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output4_sum_fu_863_p2),64));

    output4_sum_fu_863_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_859_p1) + unsigned(tmp_20_cast_reg_901));
    p_fu_797_p2 <= std_logic_vector(signed(abs_cast4_fu_781_p1) + signed(abs5_cast3_fu_789_p1));
    position_1_fu_499_p2 <= std_logic_vector(unsigned(position_fu_166) + unsigned(ap_const_lv32_1));
    posx_assign_cast8_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(posx_assign_phi_fu_350_p4),12));
    posx_assign_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(posx_assign_reg_346),11));

    posx_assign_phi_fu_350_p4_assign_proc : process(ap_enable_reg_pp3_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_flag00000000, posx_assign_reg_346, exitcond_reg_970, j_reg_979)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_970))) then 
            posx_assign_phi_fu_350_p4 <= j_reg_979;
        else 
            posx_assign_phi_fu_350_p4 <= posx_assign_reg_346;
        end if; 
    end process;

    res_1_fu_759_p2 <= std_logic_vector(unsigned(res_4_i_fu_754_p2) - unsigned(tmp_40_i_cast_fu_722_p1));
    res_2_cast5_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(small_input_q1),9));
    res_2_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(small_input_q1),11));
    res_2_i_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_2_i_fu_707_p2),11));
    res_2_i_fu_707_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_704_p1) + unsigned(tmp_20_i_cast_fu_700_p1));
    res_3_i_fu_717_p2 <= std_logic_vector(unsigned(res_2_i_cast_fu_713_p1) - unsigned(tmp_50_i_cast_reg_1035));
    res_4_i_fu_754_p2 <= std_logic_vector(unsigned(res_3_i_reg_1057) - unsigned(tmp_30_i_cast_fu_750_p1));
    res_7_i_cast_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_7_i_fu_625_p2),11));
    res_7_i_fu_625_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_621_p1) + unsigned(tmp_37_i_cast_fu_580_p1));
    res_8_i_fu_635_p2 <= std_logic_vector(unsigned(res_7_i_cast_fu_631_p1) - unsigned(res_2_cast_fu_591_p1));
    res_9_i_fu_663_p2 <= std_logic_vector(unsigned(res_8_i_reg_1025) - unsigned(tmp_47_i_cast_fu_655_p1));
    res_cast_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_367),9));
    res_fu_668_p2 <= std_logic_vector(unsigned(res_9_i_fu_663_p2) - unsigned(tmp_50_i_cast_fu_659_p1));

    small_input_address0_assign_proc : process(ap_block_pp0_stage0_flag00000000, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_flag00000000, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_flag00000000, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_flag00000000, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage2, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_flag00000000, tmp_fu_400_p1, tmp_5_fu_440_p1, tmp_i_fu_526_p1, tmp_35_i_fu_552_p1, tmp_45_i_fu_600_p1, ap_block_pp3_stage2_flag00000000, tmp_18_i_fu_674_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_block_pp3_stage3_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            small_input_address0 <= tmp_18_i_fu_674_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_block_pp3_stage2_flag00000000 = ap_const_boolean_0))) then 
            small_input_address0 <= tmp_45_i_fu_600_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_block_pp3_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            small_input_address0 <= tmp_35_i_fu_552_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            small_input_address0 <= tmp_i_fu_526_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            small_input_address0 <= tmp_5_fu_440_p1(12 - 1 downto 0);
        elsif (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            small_input_address0 <= tmp_fu_400_p1(12 - 1 downto 0);
        else 
            small_input_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    small_input_address1_assign_proc : process(ap_block_pp2_stage0_flag00000000, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_flag00000000, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_flag00000000, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_flag00000000, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter2, ap_block_pp1_stage0_flag00000000, tmp_6_fu_445_p1, tmp_7_fu_495_p1, tmp_39_i_fu_537_p1, tmp_42_i_fu_563_p1, ap_block_pp3_stage2_flag00000000, tmp_49_i_fu_610_p1, tmp_28_i_fu_687_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_block_pp3_stage3_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            small_input_address1 <= tmp_28_i_fu_687_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_block_pp3_stage2_flag00000000 = ap_const_boolean_0))) then 
            small_input_address1 <= tmp_49_i_fu_610_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_block_pp3_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            small_input_address1 <= tmp_42_i_fu_563_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            small_input_address1 <= tmp_39_i_fu_537_p1(12 - 1 downto 0);
        elsif (((ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2))) then 
            small_input_address1 <= tmp_7_fu_495_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            small_input_address1 <= tmp_6_fu_445_p1(12 - 1 downto 0);
        else 
            small_input_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    small_input_ce0_assign_proc : process(ap_CS_fsm_pp3_stage3, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp3_stage1, ap_block_pp0_stage0_flag00011001, ap_block_pp3_stage0_flag00011001, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_flag00011001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_flag00011001, ap_block_pp3_stage3_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_block_pp3_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage3_flag00011001 = ap_const_boolean_0)))) then 
            small_input_ce0 <= ap_const_logic_1;
        else 
            small_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    small_input_ce1_assign_proc : process(ap_CS_fsm_pp3_stage3, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage0_flag00011001, ap_block_pp2_stage0_flag00011001, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_flag00011001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_flag00011001, ap_block_pp3_stage3_flag00011001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or ((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_block_pp3_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage3_flag00011001 = ap_const_boolean_0)))) then 
            small_input_ce1 <= ap_const_logic_1;
        else 
            small_input_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    small_input_d1_assign_proc : process(ap_block_pp2_stage0_flag00000000, reg_361, small_input_q0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter2, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2))) then 
            small_input_d1 <= reg_361;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            small_input_d1 <= small_input_q0;
        else 
            small_input_d1 <= "XXXXXXXX";
        end if; 
    end process;


    small_input_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_exitcond6_reg_912, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond6_reg_912))) then 
            small_input_we0 <= ap_const_logic_1;
        else 
            small_input_we0 <= ap_const_logic_0;
        end if; 
    end process;


    small_input_we1_assign_proc : process(ap_block_pp2_stage0_flag00011001, exitcond1_reg_936, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_reg_pp2_iter1_exitcond3_reg_956, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_936)) or ((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond3_reg_956)))) then 
            small_input_we1 <= ap_const_logic_1;
        else 
            small_input_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_615_p2),10));
    tmp1_fu_615_p2 <= std_logic_vector(unsigned(res_cast_fu_568_p1) + unsigned(tmp_40_i_cast6_fu_584_p1));
    tmp2_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_1030),10));
    tmp2_fu_641_p2 <= std_logic_vector(unsigned(res_2_cast5_fu_587_p1) + unsigned(res_cast_fu_568_p1));
    tmp_11_fu_777_p1 <= abs_fu_735_p3(8 - 1 downto 0);
    tmp_12_fu_793_p1 <= abs5_fu_784_p3(8 - 1 downto 0);
    tmp_13_fu_819_p3 <= (i_reg_311 & ap_reg_pp3_iter1_posx_assign_reg_346);
    tmp_14_cast_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_819_p3),33));
    tmp_14_fu_803_p4 <= p_fu_797_p2(11 downto 8);
    tmp_15_fu_846_p2 <= std_logic_vector(unsigned(tmp_12_fu_793_p1) + unsigned(tmp_11_reg_1082));
    tmp_16_fu_851_p3 <= (i_reg_311 & ap_reg_pp3_iter1_posx_assign_reg_346);
    tmp_17_cast_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_851_p3),33));
    tmp_18_i_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(posx_assign_reg_346),64));
    tmp_1_fu_416_p2 <= "1" when (i_reg_311 = ap_const_lv9_1) else "0";
        tmp_20_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_read_reg_884),33));

    tmp_20_i_cast_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_i_fu_692_p3),10));
    tmp_20_i_fu_692_p3 <= (small_input_q0 & ap_const_lv1_0);
        tmp_21_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_read_reg_889),33));

    tmp_27_i_fu_679_p3 <= (ap_const_lv2_2 & posx_assign_reg_346);
    tmp_28_i_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_i_fu_679_p3),64));
        tmp_2_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_read_reg_889),64));

    tmp_30_i_cast_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_i_fu_742_p3),11));
    tmp_30_i_fu_742_p3 <= (reg_367 & ap_const_lv1_0);
    tmp_34_i_fu_546_p2 <= std_logic_vector(signed(ap_const_lv11_401) + signed(posx_assign_cast_fu_542_p1));
    tmp_35_i_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_i_fu_546_p2),64));
    tmp_37_i_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_i_fu_572_p3),10));
    tmp_37_i_fu_572_p3 <= (small_input_q0 & ap_const_lv1_0);
    tmp_38_i_fu_531_p2 <= std_logic_vector(signed(ap_const_lv12_801) + signed(posx_assign_cast8_fu_516_p1));
    tmp_39_i_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_i_fu_531_p2),64));
        tmp_3_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_450_p2),33));

    tmp_3_fu_450_p2 <= std_logic_vector(shift_left(unsigned(position_fu_166),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    tmp_40_i_cast6_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(small_input_load_3_reg_1004),9));
    tmp_40_i_cast_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(small_input_load_3_reg_1004),11));
    tmp_41_i_fu_557_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(posx_assign_reg_346));
    tmp_42_i_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_i_fu_557_p2),64));
    tmp_44_i_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) + unsigned(posx_assign_cast_reg_994));
    tmp_45_i_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_i_fu_595_p2),64));
    tmp_47_i_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_i_fu_647_p3),11));
    tmp_47_i_fu_647_p3 <= (small_input_q0 & ap_const_lv1_0);
    tmp_48_i_fu_605_p2 <= std_logic_vector(unsigned(ap_const_lv12_7FF) + unsigned(posx_assign_cast8_reg_974));
    tmp_49_i_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_i_fu_605_p2),64));
    tmp_4_fu_434_p2 <= std_logic_vector(unsigned(k_phi_fu_327_p4) + unsigned(ap_const_lv12_400));
    tmp_50_i_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(small_input_q1),11));
    tmp_5_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_434_p2),64));
    tmp_6_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_323),64));
    tmp_7_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp2_iter1_tmp_9_reg_965),64));
    tmp_9_fu_487_p3 <= (ap_const_lv1_1 & indvar1_reg_335);
    tmp_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_indvar_reg_299),64));
    tmp_i_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_520_p2),64));
end behav;
